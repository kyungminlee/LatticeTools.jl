var documenterSearchIndex = {"docs":
[{"location":"API/basic/#Basic","page":"Basic","title":"Basic","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"CurrentModule = TightBindingLattice","category":"page"},{"location":"API/basic/#Coordinate-Types","page":"Basic","title":"Coordinate Types","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.FractCoord","category":"page"},{"location":"API/basic/#TightBindingLattice.FractCoord","page":"Basic","title":"TightBindingLattice.FractCoord","text":"FractCoord\n\nFractional coordinates.\n\nMembers\n\nwhole ::Vector{Int}: Integer part of fractional coordinates\nfraction ::Vector{Float64}: [0,1) part of fractional coordinates\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#Functions","page":"Basic","title":"Functions","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.fract2carte\nTightBindingLattice.carte2fract","category":"page"},{"location":"API/basic/#TightBindingLattice.fract2carte","page":"Basic","title":"TightBindingLattice.fract2carte","text":"fract2carte(latticevectors, fc)\n\nArguments\n\nlatticevectors::AbstractArray{<:Real, 2}: square matrix whose columns are lattice vectors.\nfc::FractCoord: fractional coordinates\n\n\n\n\n\nfract2carte(unitcell, fractcoord)\n\nArguments\n\nunitcell::UnitCell\nfractcoord::FractCoord\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.carte2fract","page":"Basic","title":"TightBindingLattice.carte2fract","text":"carte2fract(latticevectors, cc; tol=√ϵ)\n\nArguments\n\nlatticevectors::AbstractArray{<:Real, 2}: square matrix whose columns are lattice vectors.\ncc::CarteCoord: cartesian coordinates\ntol::Real=Base.rtoldefault(Float64): tolerance\n\n\n\n\n\ncarte2fract(unitcell, cartecoord; tol=√ϵ)\n\nArguments\n\nunitcell::UnitCell\ncc::CarteCoord\ntol::Real=Base.rtoldefault(Float64)\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#UnitCell","page":"Basic","title":"UnitCell","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.UnitCell\nTightBindingLattice.makeunitcell","category":"page"},{"location":"API/basic/#TightBindingLattice.UnitCell","page":"Basic","title":"TightBindingLattice.UnitCell","text":"UnitCell{O}\n\nRepresent a unitcell of a lattice, which contains sites at fixed locations (does not yet implement multiple orbitals per site). It is recommended to use makeunitcell rather than the constructor to make a UnitCell object.\n\nParameters\n\nO: type of \"site\". Any type can be used, but we recommend using String or tuple of String and Int for compatibility with JSON.\n\nFields\n\nlatticevectors::Array{Float64, 2}: Lattice vectors\nreducedreciprocallatticevectors::Array{Float64, 2}: Reduced reciprocal lattice vectors  (transpose of inverse of latticevectors)\nreciprocallatticevectors ::Array{Float64, 2}: Reciprocal lattice vectors. 2π * reducedreciprocallatticevectors\nsites::Vector{Tuple{T, FractCoord}}: List of sites within unit cell\nsiteindices::Dict{T, Int}: Indices of sites\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#TightBindingLattice.makeunitcell","page":"Basic","title":"TightBindingLattice.makeunitcell","text":"makeunitcell(latticevectors; SiteType=Any, tol=√ϵ)\n\nConstruct an n-dimensional lattice.\n\nArguments\n\nlatticevectors: Lattice vectors. Can be a nested array of lattice vectors, or a two-dimensional array whose columns are lattice vectors, or a real number.\n\nOptional Arguments\n\nSiteType::DataType\ntol=√ϵ: Epsilon\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#Functions-2","page":"Basic","title":"Functions","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension\nTightBindingLattice.numsite\nTightBindingLattice.sitecount\nTightBindingLattice.addsite!\nTightBindingLattice.hassite\nTightBindingLattice.getsite\nTightBindingLattice.getsiteindex\nTightBindingLattice.getsitecoord\nTightBindingLattice.getsiteindexcoord\nTightBindingLattice.getsitename\nTightBindingLattice.carte2fract(::UnitCell, ::CarteCoord)\nTightBindingLattice.fract2carte(::UnitCell, ::FractCoord)\nTightBindingLattice.whichunitcell\nTightBindingLattice.momentumgrid(::UnitCell, ::AbstractVector{<:Integer})\nTightBindingLattice.findsiteindex","category":"page"},{"location":"API/basic/#TightBindingLattice.dimension","page":"Basic","title":"TightBindingLattice.dimension","text":"dimension(fc::FractCoord)\n\nDimension of the fractional coordinates\n\nArguments\n\nfc::FractCoord: Fractional coordinates.\n\n\n\n\n\ndimension(ortho::OrthoCube)\n\nReturn the spatial dimension of the orthocube.\n\n\n\n\n\ndimension(uc)\n\nSpatial dimension of the unit cell.\n\n\n\n\n\ndimension(arg::TranslationOperation)\n\nSpatial dimension of the translation operation\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.numsite","page":"Basic","title":"TightBindingLattice.numsite","text":"numsite(unitcell)\n\nNumber of sites of the unit cell.\n\nArguments\n\nuc ::UnitCell\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.sitecount","page":"Basic","title":"TightBindingLattice.sitecount","text":"sitecount(unitcell)\n\nNumber of sites of the unit cell.\n\nArguments\n\nuc ::UnitCell\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.addsite!","page":"Basic","title":"TightBindingLattice.addsite!","text":"addsite!(unitcell, sitename, sitecoord)\n\nAdd an site to the unit cell.\n\nArguments\n\nuc ::UnitCell{T}\nsitename ::{T}\nsitecoord ::FractCoord\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.hassite","page":"Basic","title":"TightBindingLattice.hassite","text":"hassite(unitcell, name)\n\nTest whether the unit cell contains the site of given name.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsite","page":"Basic","title":"TightBindingLattice.getsite","text":"getsite(unitcell, name)\n\nGet the site (its site name and its fractional coordinates) with the given name.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\nReturn\n\n(sitename, fractcoord)\n\n\n\n\n\ngetsite(unitcell, index)\n\nArguments\n\nunitcell::UnitCell\nindex::Integer\n\nReturn\n\n(sitename, fractcoord)\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsiteindex","page":"Basic","title":"TightBindingLattice.getsiteindex","text":"getsiteindex(unitcell, name)\n\nGet index of the given site.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsitecoord","page":"Basic","title":"TightBindingLattice.getsitecoord","text":"getsitecoord(unitcell, name)\n\nGet the fractional coordinates of the site with the given name.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\nReturn\n\nfractcoord\n\n\n\n\n\ngetsitecoord(unitcell, index)\n\nArguments\n\nunitcell::UnitCell\nindex::Integer\n\nReturn\n\nFractCoord\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsiteindexcoord","page":"Basic","title":"TightBindingLattice.getsiteindexcoord","text":"getsiteindexcoord(unitcell, name)\n\nArguments\n\nunitcell::UnitCell{T}\nname::T\n\nReturn\n\n(index, fractcoord)\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsitename","page":"Basic","title":"TightBindingLattice.getsitename","text":"getsitename(unitcell, index)\n\nArguments\n\nuc::UnitCell\nindex::Integer\n\nReturn\n\nsitename\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.carte2fract-Tuple{UnitCell,Array{Float64,1}}","page":"Basic","title":"TightBindingLattice.carte2fract","text":"carte2fract(unitcell, cartecoord; tol=√ϵ)\n\nArguments\n\nunitcell::UnitCell\ncc::CarteCoord\ntol::Real=Base.rtoldefault(Float64)\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.fract2carte-Tuple{UnitCell,FractCoord}","page":"Basic","title":"TightBindingLattice.fract2carte","text":"fract2carte(unitcell, fractcoord)\n\nArguments\n\nunitcell::UnitCell\nfractcoord::FractCoord\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.whichunitcell","page":"Basic","title":"TightBindingLattice.whichunitcell","text":"whichunitcell(unitcell, name, cartecoord; tol=√ϵ)\n\nReturn\n\nVector{Int}: the integer coordinate of the unitcell that the specified site/cartesian coordinate belongs to.\n\n\n\n\n\nwhichunitcell(unitcell, name, fractcoord; tol=√ϵ)\n\nReturn\n\nVector{Int}: the integer coordinate of the unitcell that the specified site/fractional coordinate belongs to.\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.findsiteindex","page":"Basic","title":"TightBindingLattice.findsiteindex","text":"findsiteindex(unitcell::UnitCell, fc::FractCoord; tol=√ϵ)\n\nFind the index of the site, and the unitcell coordinate at the specified fractional coordinate.\n\nArguments\n\nunitcell::UnitCell\nfc::FractCoord\n\nReturns\n\n(site_index, unitcell_vector), or (-1, []) if not found.\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#OrthoCube","page":"Basic","title":"OrthoCube","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.OrthoCube","category":"page"},{"location":"API/basic/#TightBindingLattice.OrthoCube","page":"Basic","title":"TightBindingLattice.OrthoCube","text":"OrthoCube(shape)\n\nRepresent a hypercubic (Bravais) lattice.\n\nFields\n\nshape_matrix: a matrix whose columns are the lattice vectors of the\ninverse_shape_matrix: (shape_matrix)\nwrap: periodic wrapping function which takes an integer array, and maps it onto a site in the Bravais lattice. Analogous to fldmod.\n\n\n\n\n\n","category":"type"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension(::OrthoCube)\nTightBindingLattice.volume(::OrthoCube)\nTightBindingLattice.isequiv(::OrthoCube, ::OrthoCube)\nTightBindingLattice.find_generators(::OrthoCube)\nTightBindingLattice.find_generators_2d(::OrthoCube)\nTightBindingLattice.generate_coordinates(::OrthoCube, ::Matrix{Int})","category":"page"},{"location":"API/basic/#TightBindingLattice.dimension-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.dimension","text":"dimension(ortho::OrthoCube)\n\nReturn the spatial dimension of the orthocube.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.volume-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.volume","text":"volume(ortho::OrthoCube)\n\nReturn the signed volume of the orthocube, defined by the determinant of the shape.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.isequiv-Tuple{OrthoCube,OrthoCube}","page":"Basic","title":"TightBindingLattice.isequiv","text":"isequiv(lhs::OrthoCube, rhs::OrthoCube)\n\nCheck whether the two orthocubes are equivalent.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.generate_coordinates-Tuple{OrthoCube,Array{Int64,2}}","page":"Basic","title":"TightBindingLattice.generate_coordinates","text":"generate_coordinates(ortho, generators)\n\nGenerate a list of coordinates of the orthocube\n\nArguments\n\northo::OrthoCube\ngenerator_translations::AbstractMatrix{<:Integer}\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#Lattice","page":"Basic","title":"Lattice","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.Lattice\nTightBindingLattice.makelattice","category":"page"},{"location":"API/basic/#TightBindingLattice.Lattice","page":"Basic","title":"TightBindingLattice.Lattice","text":"Lattice{O}\n\nRepresent a lattice.\n\nArguments\n\nunitcell::UnitCell{O}\northocube::OrthoCube\nbravais_coordinates::Vector{Vector{Int}}\nsupercell::UnitCell{Tuple{O, Vector{Int}}}\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#TightBindingLattice.makelattice","page":"Basic","title":"TightBindingLattice.makelattice","text":"makelattice(unitcell, shape, [generators])\n\nCreate a lattice with periodic boundary condition, using the unitcell, shape, and translation generators.\n\nArguments\n\nunitcell::UnitCell{O}\nshape_matrix::AbstractMatrix{<:Integer}: shape of the Bravais lattice. This can also be\n\na single integer, which is equivalent to a identity matrix times the number.\n\nOptional Arguments\n\ngenerator_translations::AbstractMatrix{<:Integer}\n\n\n\n\n\n","category":"function"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension(::Lattice)","category":"page"},{"location":"API/basic/#Permutation","page":"Basic","title":"Permutation","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.Permutation\nBase.*(::Permutation, ::Permutation)\nTightBindingLattice.generate_group(::Permutation, ::Permutation)","category":"page"},{"location":"API/basic/#TightBindingLattice.Permutation","page":"Basic","title":"TightBindingLattice.Permutation","text":"    Permutation(perms; max_order=2048)\n\nCreate a permutation of integers from 1 to n. perms should be a permutation of 1:n.\n\nArguments\n\nperms: an integer vector containing a permutation of integers from 1 to n\nmax_order: maximum order\n\nNote\n\nThe convention for the permutation is that map[i] gets mapped to i. In other words, map tells you where each element is from.\n\n\n\n\n\n","category":"type"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_symmetry_kspace_honeycomb.jl\"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Little-Symmetry","page":"Honeycomb lattice in k-space","title":"Little Symmetry","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"using LinearAlgebra\nusing Plots\nusing TightBindingLattice\n\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nfunction makewithin(extent::AbstractVector{<:Real})\n    a, b, c, d = extent\n    (x::Real, y::Real) -> ((a <= x <= b) && (c <= y <= d))\nend\nmkpath(\"example_little_symmetry_kspace_honeycomb\")","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Honeycome-lattice","page":"Honeycomb lattice in k-space","title":"Honeycome lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Define-Unitcell","page":"Honeycomb lattice in k-space","title":"Define Unitcell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"latticevectors = [1 -0.5; 0 sqrt(3)*0.5];\nunitcell = make_unitcell(latticevectors; SiteType=String);\naddsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5 / sqrt(3)]));\naddsite!(unitcell, \"B\", carte2fract(unitcell, [0.5, -0.5 / sqrt(3)]));\nnothing #hide","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-2, 2, -2, 2]\n    within = makewithin(extent)\n    for i1 in -5:5, i2 in -5:5\n        R = latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in unitcell.sites\n            orb_cc = fract2carte(unitcell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-3-supercell","page":"Honeycomb lattice in k-space","title":"√3 × √3 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [2 -1; 1 1]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-2","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-4, 4, -4, 4]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(400, 500), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-23-supercell","page":"Honeycomb lattice in k-space","title":"2√3 × 2√3 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-2","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [2 2; -2 4]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-3","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-2","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space-2","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                #push!(generatornames, join(psym_little.element_names[psym_little.generators], \"<br>\"))\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(600, 750), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#6-supercell","page":"Honeycomb lattice in k-space","title":"6 × 6 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-3","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [6 0; 0 6]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-4","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-3","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space-3","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                #push!(generatornames, join(psym_little.element_names[psym_little.generators], \"<br>\"))\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(800, 1000), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_kagome_symmetry.jl\"","category":"page"},{"location":"generated/example_kagome_symmetry/#Kagome-Lattice","page":"Kagome lattice","title":"Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#Preamble","page":"Kagome lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Printf\nusing Plots\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_kagome_symmetry\")\nextent = [-2, 2, -2, 2]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4])","category":"page"},{"location":"generated/example_kagome_symmetry/#Generate-Kagome-Lattice","page":"Kagome lattice","title":"Generate Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"function make_kagome_lattice(size_matrix ::AbstractMatrix{<:Integer})\n    latticevectors = [1 -0.5; 0 0.5*sqrt(3.0)];\n    unitcell = make_unitcell(latticevectors, SiteType=String)\n    addsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.0]))\n    addsite!(unitcell, \"B\", carte2fract(unitcell, [0.25, 0.25*sqrt(3.0)]))\n    addsite!(unitcell, \"C\", carte2fract(unitcell, [0.5+0.25, 0.25*sqrt(3.0)]))\n\n    nnbondtypes = [\n        ([ 0, 0], \"A\", [ 0, 0], \"B\", 1),\n        ([ 0, 0], \"A\", [ 0, 0], \"C\", 1),\n        ([ 0, 0], \"B\", [ 0, 0], \"C\", 1),\n        ([ 1, 1], \"A\", [ 1, 0], \"B\",-1),\n        ([ 1, 0], \"B\", [ 0, 0], \"C\",-1),\n        ([ 0, 0], \"C\", [ 1, 1], \"A\",-1),\n    ]\n\n    nnnbondtypes = [\n        ([ 0, 0], \"A\", [ 1, 0], \"B\", 1), # ◁\n        ([ 1, 0], \"B\", [ 0,-1], \"C\", 1),\n        ([ 0,-1], \"C\", [ 0, 0], \"A\", 1),\n        ([ 0, 0], \"C\", [ 1, 0], \"A\",-1),\n        ([ 1, 0], \"A\", [ 0,-1], \"B\",-1), # ▷\n        ([ 0,-1], \"B\", [ 0, 0], \"C\",-1),\n    ]\n\n    lattice = make_lattice(unitcell, size_matrix)\n    orthocube = lattice.orthocube\n    supercell = lattice.supercell\n    tsym = TranslationSymmetry(lattice)\n    psym = little_symmetry(tsym, project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0]))\n    tsymbed = embed(lattice, tsym)\n    psymbed = embed(lattice, psym)\n    ssymbed = tsymbed ⋊ psymbed\n\n    nnbonds = []\n    nnnbonds = []\n\n    for r in lattice.bravais_coordinates\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.siteindices, roworb_super, -1)\n            icol = get(supercell.siteindices, colorb_super, -1)\n            push!(nnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.siteindices, roworb_super, -1)\n            icol = get(supercell.siteindices, colorb_super, -1)\n            push!(nnnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n    end\n\n    nn_triangles = []\n    for r in lattice.bravais_coordinates\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[1:3]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.siteindices, roworb_super, -1)\n        icol = get(supercell.siteindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, 1))\n\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[4:6]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.siteindices, roworb_super, -1)\n        icol = get(supercell.siteindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, -1))\n    end\n\n    return (unitcell=unitcell,\n            lattice=lattice,\n            space_symmetry_embedding=ssymbed,\n            nearest_neighbor_bonds=nnbonds,\n            next_nearest_neighbor_bonds=nnnbonds,\n            nearest_neighbor_triangles=nn_triangles)\nend","category":"page"},{"location":"generated/example_kagome_symmetry/#Symmetry-analysis","page":"Kagome lattice","title":"Symmetry analysis","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"kagome = make_kagome_lattice([4 -2; 2 2])\n\ntsymbed = kagome.space_symmetry_embedding.normal\npsymbed = kagome.space_symmetry_embedding.rest\ntsym = symmetry(tsymbed)\npsym = symmetry(psymbed)\n\nprintln(\"Point Symmetry\")\nprintln(\"==============\")\nprintln()\nprintln(\"Point group: \", psym.hermann_mauguin)\nprintln(\"Number of elements: \", group_order(psym))\nprintln(\"Number of irreps: \", num_irreps(psym))","category":"page"},{"location":"generated/example_kagome_symmetry/#Site-map","page":"Kagome lattice","title":"Site map","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"site_map = findsitemap(kagome.lattice.unitcell, psym)\n\nprintln(\"Site map\")\nprintln(\"-----------\")\nprintln()\n\nfor (n, map) in zip(element_names(psym), site_map)\n    @printf(\"%32s:\", n)\n    for (i_elem, (j_elem, R)) in enumerate(map)\n        @printf(\"  %d ↦ %d, %-8s\", i_elem, j_elem, string(R))\n    end\n    println()\nend\nprintln()","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Translation-Symmetry","page":"Kagome lattice","title":"Plot Translation Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.sites)\n        orbfc = getsitecoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Point-Symmetry","page":"Kagome lattice","title":"Plot Point Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.sites)\n        orbfc = getsitecoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome lattice","title":"Kagome lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point group elements","title":"Point group elements","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_elements.jl\"","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point group elements","title":"Point group elements","text":"Search elements by their Seitz name, and show their matrix representations","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point group elements","title":"Point group elements","text":"using TightBindingLattice\n\nall_elements = Dict()\nprint(\"# Reading groups\")\nfor i in 1:32\n    print(\" $i\")\n    psym = PointSymmetryDatabase.get(i)\n    for (elname, matrep) in zip(psym.element_names, psym.matrix_representations)\n        if !haskey(all_elements, elname)\n            all_elements[elname] = []\n        end\n        push!(all_elements[elname], (matrep, psym.hermann_mauguin))\n    end\nend\nprintln()\n\nprintln(\"elements:\")\nfor (k, v) in all_elements\n    println(\"- element_name: $k\")\n    println(\"  matrix_representations:\")\n    for v2 in v\n        m = [collect(x) for x in eachrow(v2[1])]\n        g = v2[2]\n        println(\"  - { matrix: $(m), group: \\\"$g\\\" }\")\n    end\nend","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point group elements","title":"Point group elements","text":"","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point group elements","title":"Point group elements","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_point_group_4mm/","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_4mm.jl\"","category":"page"},{"location":"generated/example_point_group_4mm/#Point-group-4mm-(Cᵥ)","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"","category":"section"},{"location":"generated/example_point_group_4mm/#Preamble","page":"Point group 4mm (C₄ᵥ)","title":"Preamble","text":"","category":"section"},{"location":"generated/example_point_group_4mm/","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"using TightBindingLattice\nusing Formatting: printfmt\n\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/#Irreps-of-4mm","page":"Point group 4mm (C₄ᵥ)","title":"Irreps of 4mm","text":"","category":"section"},{"location":"generated/example_point_group_4mm/","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"point_symmetry = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0])\nprintln(\"symmetry: \", point_symmetry.hermann_mauguin)\nprintln(\"order: \", group_order(point_symmetry))\nprintln(\"irreducible_representations:\")\nfor irrep_index in 1:num_irreps(point_symmetry)\n    println(\"- name: GM($irrep_index)\")\n    println(\"  elements:\")\n    for (ename, mat) in zip(element_names(point_symmetry), irrep(point_symmetry, irrep_index))\n        println(\"  - name: \\\"$ename\\\"\")\n        m = Int.(real.(mat))\n        if size(m, 1) == 1\n            println(\"    matrix: $(first(m))\")\n        else\n            println(\"    matrix: |-\")\n            display_matrix(stdout, m; prefix=\"      \")\n        end\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"","category":"page"},{"location":"generated/example_point_group_4mm/","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_group_isomorphism.jl\"","category":"page"},{"location":"generated/example_group_isomorphism/#Group-isomorphism","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#Set-up-basic-functions","page":"Group isomorphism","title":"Set up basic functions","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"using TightBindingLattice\nusing Formatting\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            print(io, icol == 1 ? prefix : \" \")\n            printfmt(io, \"{:>$(width)s}\", \"$col\")\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_group_isomorphism/#Generate-two-isomorphic-groups","page":"Group isomorphism","title":"Generate two isomorphic groups","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"group1 = FiniteGroup([1 2 3 4;\n                      2 1 4 3;\n                      3 4 2 1;\n                      4 3 1 2]);\ngroup2 = let mtab1 = group1.multiplication_table,\n             mtab2 = zeros(Int, (4, 4)),\n             mapping = [1, 3, 2, 4]\n             for i in 1:4, j in 1:4\n                 mtab2[mapping[i], mapping[j]] = mapping[mtab1[i,j]]\n             end\n             FiniteGroup(mtab2)\n         end;\nnothing #hide","category":"page"},{"location":"generated/example_group_isomorphism/#Group-multiplication-tables","page":"Group isomorphism","title":"Group multiplication tables","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"println(\"Multiplication table of G₁\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group1))\nprintln()\n\nprintln(\"Multiplication table of G₂\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group2))\nprintln()","category":"page"},{"location":"generated/example_group_isomorphism/#Group-isomorphism-2","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"println(\"Group isomorphism  ϕ: G₁ → G₂\")\nprintln(\"-----------------------------\")\nϕ = group_isomorphism(group1, group2)\nfor g in 1:group_order(group1)\n    println(\"  ϕ($g) = $(ϕ[g])\")\nend\nprintln()\n\nmtab2 = zeros(Int, (group_order(group1), group_order(group1)))\nfor g in 1:group_order(group1), h in 1:group_order(group1)\n    mtab2[ϕ[g], ϕ[h]] = ϕ[ group_product(group1, g, h) ]\nend\n\nprintln(\"Multiplication table of ϕ(G₁)\")\nprintln(\"-----------------------------\")\ndisplay_matrix(stdout, mtab2)\nprintln()\nprintln(\"  ϕ(g)⋅ϕ(h) = ϕ(g⋅h)\")\nprintln(\"  ϕ(G₁) ≡ G₂ should hold.\")","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group isomorphism","title":"Group isomorphism","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Symmetry/operation-space/#Symmetry-Operations","page":"Symmetry Operations","title":"Symmetry Operations","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"AbstractSpaceSymmetryOperation{S} (where S is the type for the coordinates) represent spatial symmetry, including translation, and point operation, and the combination of the two.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"using TightBindingLattice","category":"page"},{"location":"Symmetry/operation-space/#Translation-Operation","page":"Symmetry Operations","title":"Translation Operation","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"The type TranslationOperation{S} represents translation operation on the space of coordinates of type S.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"A translation operation can be of integer type.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"TranslationOperation([1, 2])","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"It can also represent translation of non-integer type","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"TranslationOperation([0.5, 0.0, 0.5])","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"TranslationOperation([1//2, 3//4])","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"A translation operation can be applied to a coordinate","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"t = TranslationOperation([1, 2])\n@show t([3, 4])\n@show apply_operation(t, [3, 4])","category":"page"},{"location":"Symmetry/operation-space/#Point-Operation","page":"Symmetry Operations","title":"Point Operation","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"p = PointOperation([0 1; 1 0])\n@show p([3, 4])","category":"page"},{"location":"lattice/#Lattice","page":"Lattice","title":"Lattice","text":"","category":"section"},{"location":"lattice/","page":"Lattice","title":"Lattice","text":"Definition of lattice involves","category":"page"},{"location":"lattice/","page":"Lattice","title":"Lattice","text":"definition of unitcell with lattice vectors\ndefinition of sites within a unitcell.\ndefinition of Bravais lattice","category":"page"},{"location":"lattice/#UnitCell-and-Sites","page":"Lattice","title":"UnitCell and Sites","text":"","category":"section"},{"location":"lattice/","page":"Lattice","title":"Lattice","text":"using TightBindingLattice\nunitcell = make_unitcell([1.0 0.0; 0.0 1.0]; SiteType=String)\naddsite!(unitcell, \"A\", FractCoord([0,0], [0.1, 0.0]))\naddsite!(unitcell, \"B\", FractCoord([0,0], [0.0, 0.1]))\nunitcell","category":"page"},{"location":"lattice/#OrthoCube","page":"Lattice","title":"OrthoCube","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_orthocube.jl\"","category":"page"},{"location":"generated/example_orthocube/#Orthocube-Examples-(Bravais-Lattice)","page":"Orthocube","title":"Orthocube Examples (Bravais Lattice)","text":"","category":"section"},{"location":"generated/example_orthocube/#Preamble","page":"Orthocube","title":"Preamble","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"using TightBindingLattice\nusing Plots\nmkpath(\"example_orthocube\")\n\nfunction draw_orthocube(orthocube::OrthoCube, coordinates::AbstractMatrix{<:Integer})\n    xlim = (minimum(coordinates[1,:]) - 3.5, maximum(coordinates[1,:]) + 3.5)\n    ylim = (minimum(coordinates[2,:]) - 3.5, maximum(coordinates[2,:]) + 3.5)\n    boundary = let\n        r0 = [0,0]\n        r1 = orthocube.shape_matrix[:,1]\n        r2 = orthocube.shape_matrix[:,2]\n        hcat(r0, r1, r1 .+ r2, r2, r0)\n    end\n    fig = plot(boundary[1,:], boundary[2,:], label=\"\", size=(400, 400))\n    for Ri in Iterators.product(-1:1, -1:1)\n        alpha = (Ri == (0,0)) ? 1.0 : 0.1\n        Rr = orthocube.shape_matrix * [Ri...]\n        scatter!(coordinates[1,:] .+ Rr[1], coordinates[2,:] .+ Rr[2], aspect_ratio=1, markersize=12, xlim=xlim, ylim=ylim, markeralpha=alpha, label=\"\")\n        annotation = []\n        for i in 1:size(coordinates, 2)\n            x = coordinates[1,i] + Rr[1]\n            y = coordinates[2,i] + Rr[2]\n            if xlim[1] < x < xlim[2] && ylim[1] < y < ylim[2]\n                push!(annotation, (x, y, text(\"$i\", 8, :black, :center)))\n            end\n        end\n        if !isempty(annotation)\n            annotation = [annotation...]\n            annotate!(annotation)\n        end\n    end\n    fig\nend","category":"page"},{"location":"generated/example_orthocube/#(4,-4)-x-(4,4)","page":"Orthocube","title":"(4,-4) x (4,4)","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"size_matrix = [ 4 4; -4 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(4,-4)x(4,4).svg\")","category":"page"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/#(2,-2)-x-(2,4)","page":"Orthocube","title":"(2,-2) x (2,4)","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"size_matrix = [ 2 2; -2 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\ndraw_orthocube(orthocube, coordmat)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(2,-2)x(2,4).svg\")","category":"page"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"","category":"page"},{"location":"generated/example_orthocube/","page":"Orthocube","title":"Orthocube","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_honeycomb_symmetry.jl\"","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Honeycomb-lattice","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#Preamble","page":"Honeycomb lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Plots\n\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_honeycomb_symmetry\")\nextent = [-2.5, 2.5, -2.5, 2.5]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4]);\nnothing #hide","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Set-up-lattice-and-symmetry","page":"Honeycomb lattice","title":"Set up lattice and symmetry","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"scale_matrix = [2 2; -2 4]\n@assert det(scale_matrix) ≈ 12\n\nunitcell = make_unitcell([1 -0.5; 0 0.5*sqrt(3.0)])\naddsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5/sqrt(3)]))\naddsite!(unitcell, \"B\", carte2fract(unitcell, [0.5,-0.5/sqrt(3)]))\n\nlattice = make_lattice(unitcell, scale_matrix)\n\ntsymbed = translation_symmetry_embedding(lattice)\ntsym = symmetry(tsymbed)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\npsymbed = embed(lattice, psym)\n\nprint(\"Point group: \", psym.hermann_mauguin)","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Permutations","page":"Honeycomb lattice","title":"Permutations","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"println(\"Translation permutations\")\nprintln(\"------------------------\")\n\nfor t in tsymbed\n    println(t)\nend\nprintln()\n\nprintln(\"Point permutations\")\nprintln(\"------------------\")\nfor p in psymbed\n    println(p)\nend\nprintln()","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-translation-symmetry-embeddings","page":"Honeycomb lattice","title":"Plots for translation symmetry embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.sites)\n        orbfc = getsitecoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-point-symmetry-embeddings","page":"Honeycomb lattice","title":"Plots for point symmetry embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.sites)\n        orbfc = getsitecoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"<!– @autodocs --> Modules = [TightBindingLattice] Order = [:type, :function] <!-- –>","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_2d.jl\"","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group-in-2D","page":"Little group in 2d","title":"Little Group in 2D","text":"","category":"section"},{"location":"generated/example_little_group_2d/#Preamble","page":"Little group in 2d","title":"Preamble","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"using TightBindingLattice\nusing Formatting\nusing Plots\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_little_group_2d/#Set-up-lattice-and-symmetry","page":"Little group in 2d","title":"Set up lattice and symmetry","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"unitcell = make_unitcell([1.0 0.0; 0.0 1.0]; SiteType=String);\naddsite!(unitcell, \"Ox\", FractCoord([0,0], [0.5, 0.0]));\naddsite!(unitcell, \"Oy\", FractCoord([0,0], [0.0, 0.5]));\n\nlattice = make_lattice(unitcell, [4 0; 0 4]);\ntsym = TranslationSymmetry(lattice);\npsym = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0]);\nnothing #hide","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group","page":"Little group in 2d","title":"Little Group","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"lge = little_group_elements(tsym, 2, psym)\nlg = little_group(tsym, 2, psym)\nprintln(\"Little group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg))\n\n\nlg_matrep = psym.matrix_representations[lge]\nprintln(\"Matrix representations: $lg_matrep\")","category":"page"},{"location":"generated/example_little_group_2d/#Finding-point-groups-isomorphic-to-the-little-group","page":"Little group in 2d","title":"Finding point groups isomorphic to the little group","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"little_symmetry_candidates = Tuple{PointSymmetry, Vector{Int}}[]\nfor i in 1:32\n    ps = PointSymmetryDatabase.get(i)\n    ϕ = group_isomorphism(lg, ps.group)\n    if !isnothing(ϕ)\n        push!(little_symmetry_candidates, (ps, ϕ))\n    end\nend\n(psym2, ϕ) = first(little_symmetry_candidates)\n\nlg_matrep2 = lg_matrep[ϕ]\nprintln(\"Matrix representations (isomorphic): $lg_matrep2\")","category":"page"},{"location":"generated/example_little_group_2d/#Multiplication-Tables","page":"Little group in 2d","title":"Multiplication Tables","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"println(\"Parent point group\")\nprintln(\"------------------\")\ndisplay_matrix(stdout, group_multiplication_table(psym2))\nprintln(\"Little group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep))\nprintln(\"Isomorphic little group\")\nprintln(\"-----------------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep2))","category":"page"},{"location":"generated/example_little_group_2d/#Irreps-and-Little-Groups","page":"Little group in 2d","title":"Irreps and Little Groups","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"println(\"Irreps and Little Groups\")\nprintln(\"------------------------\")\nfor tsic in get_irrep_components(tsym)\n    idx = tsic.irrep_index\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group: { name: \\\"$(psym_little.hermann_mauguin)\\\", order: $(group_order(psym_little)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little_compatible: $(iscompatible(tsym, idx, psym_little))\")\nend","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little group in 2d","title":"Little group in 2d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/group/#Group","page":"Group","title":"Group","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"CurrentModule = TightBindingLattice","category":"page"},{"location":"API/group/#AbstractGroup","page":"Group","title":"AbstractGroup","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"TightBindingLattice.AbstractGroup","category":"page"},{"location":"API/group/#TightBindingLattice.AbstractGroup","page":"Group","title":"TightBindingLattice.AbstractGroup","text":"AbstractGroup\n\nAbstract type for abstract groups. Currently the only subtype is FiniteGroup.\n\n\n\n\n\n","category":"type"},{"location":"API/group/#FiniteGroup","page":"Group","title":"FiniteGroup","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"TightBindingLattice.FiniteGroup","category":"page"},{"location":"API/group/#TightBindingLattice.FiniteGroup","page":"Group","title":"TightBindingLattice.FiniteGroup","text":"FiniteGroup\n\nFinite group, with elements {1, 2, 3,..., n}. The identity element is always 1. Can be constructed using FiniteGroup(multiplication_table)\n\nFields\n\nmultiplication_table::Matrix{Int}: multiplication table\nperiod_lengths::Vector{Int}: period length (order) of every element\ninverses::Vector{Int}: inverse of every element\nconjugacy_classes::Vector{Vector{Int}}: conjugacy classes\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> FiniteGroup([1 2; 2 1])\nFiniteGroup([1 2; 2 1], [1, 2], [1, 2], [[1], [2]])\n\n\n\n\n\n","category":"type"},{"location":"API/group/","page":"Group","title":"Group","text":"TightBindingLattice.element(::FiniteGroup, ::Any)\nTightBindingLattice.elements(::FiniteGroup)\nTightBindingLattice.element_name(::FiniteGroup, ::Any)\nTightBindingLattice.element_names(::FiniteGroup)\nTightBindingLattice.group_order(::FiniteGroup)\nTightBindingLattice.group_order(::FiniteGroup, ::Any)\nTightBindingLattice.period_length(::FiniteGroup, ::Any)\nTightBindingLattice.group_multiplication_table(::FiniteGroup)\nTightBindingLattice.isabelian(::FiniteGroup)\nTightBindingLattice.group_product(::FiniteGroup, ...)","category":"page"},{"location":"API/group/#TightBindingLattice.element-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.element","text":"element(group, idx)\n\nReturn the element of index idx. For FiniteGroup, this is somewhat meaningless since the idxth element is idx. The sole purpose of this function is the bounds checking.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.elements-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.elements","text":"elements(group)\n\nReturn the elements of the group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.element_name-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.element_name","text":"element_name(group, idx)\n\nReturn the name of element at index idx, which is just the string of idx.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.element_names-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.element_names","text":"element_names(group)\n\nReturn the names of element.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_order-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_order","text":"group_order(group)\n\nOrder of group (i.e. number of elements)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_order-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.group_order","text":"group_order(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.period_length-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.period_length","text":"period_length(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_multiplication_table-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(group)\n\nReturn multiplcation table of the group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.isabelian-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.isabelian","text":"isabelian(group)\n\nCheck if the group is abelian.\n\n\n\n\n\n","category":"method"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_3d.jl\"","category":"page"},{"location":"generated/example_little_group_3d/#Little-group-3D","page":"Little group in 3d","title":"Little group 3D","text":"","category":"section"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"using TightBindingLattice\n\nunitcell = make_unitcell([1.0 0.0 0.0; 0.0 1.0 0.0; 0 0 1]; SiteType=String)\naddsite!(unitcell, \"Ox\", FractCoord([0,0,0], [0.5, 0.0, 0.0]))\naddsite!(unitcell, \"Oy\", FractCoord([0,0,0], [0.0, 0.5, 0.0]))","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"Currently, make_lattice in three-dimension is unsupported","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"lattice = make_lattice(unitcell, [4 0 0; 0 4 0; 0 0 3], [1 0 0; 0 1 0; 0 0 1])\ntsym = TranslationSymmetry(lattice.orthocube, [1 0 0; 0 1 0; 0 0 1])\npsym = project(PointSymmetryDatabase.get(15), [1 0 0; 0 1 0; 0 0 1])\n\nfor idx in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little1 = little_symmetry(tsym, idx, psym)\n    psym_little2 = TightBindingLattice.little_symmetry_iso(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group1: { name: \\\"$(psym_little1.hermann_mauguin)\\\", order: $(group_order(psym_little1)) }\")\n    println(\"  little_point_group2: { name: \\\"$(psym_little2.hermann_mauguin)\\\", order: $(group_order(psym_little2)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little1_compatible: $(iscompatible(tsym, idx, psym_little1))\")\n    println(\"  is_psym_little2_compatible: $(iscompatible(tsym, idx, psym_little2))\")\nend","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little group in 3d","title":"Little group in 3d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Welcome-to-TightBindingLattice","page":"Home","title":"Welcome to TightBindingLattice","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TightBindingLattice is a package that provides funtionalities for (1) defining a lattice system, and (2) symmetry analysis.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TightBindingLattice is currently not included in Julia's default package registry. To install, first add the package registry KyugminLeeRegistry and then install TightBindingLattice.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.5) pkg> registry add https://github.com/kyungminlee/KyungminLeeRegistry.git\n(@v1.5) pkg> add TightBindingLattice","category":"page"},{"location":"Symmetry/symmetry-space/#Symmetry-Analysis","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"","category":"section"},{"location":"Symmetry/symmetry-space/#Group","page":"Symmetry Analysis","title":"Group","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Group has group structure. Examples are FiniteGroup, GenericGroup","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Multiplication table\norder (period length) of every element","category":"page"},{"location":"Symmetry/symmetry-space/#Space-Symmetry","page":"Symmetry Analysis","title":"Space Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Symmetry on the other hand, is a representation of the group structure in some space. Examples are: TranslationSymmetry, PointSymmetry. Members are","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"group\ngenerators\nconjugacy_classes\ncharacter_table\nirreps\nelement names","category":"page"},{"location":"Symmetry/symmetry-space/#Translation-Symmetry","page":"Symmetry Analysis","title":"Translation Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/#Point-Symmetry","page":"Symmetry Analysis","title":"Point Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"PointSymmetry has additional info","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"matrix_representations (i.e. representation in units of lattice vectors)\nSchoenflies\nHermann Mauguin","category":"page"},{"location":"Symmetry/symmetry-space/#Symmorphic-Space-Symmetry","page":"Symmetry Analysis","title":"Symmorphic Space Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/#Symmetry-Embedding","page":"Symmetry Analysis","title":"Symmetry Embedding","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Site mapping","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"     T ⋊ P →  E(L,P)\n\n     ↓     ↘    ↓\n\n  E(L,T)   →  E(L, T ⋊ P)","category":"page"},{"location":"Symmetry/symmetry-space/#Compatibility-between-symmetries,-symmetry-embeddings,-and-their-irrep-components","page":"Symmetry Analysis","title":"Compatibility between symmetries, symmetry-embeddings, and their irrep components","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"In case of (symmorphic) space symmetry, we want to make sure that the translation symmetry and the point symmetry are \"compatible\".","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"The compatibility condition is the following","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-translation-symmetry","page":"Symmetry Analysis","title":"1. Between lattice and translation symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Lattice is built on (1) definition of unitcell, and (2) Bravais lattice. Since the second part, the Bravais lattice (with periodic boundary condition), encodes directly the information of the translation symmetry, a Lattice and a TranslationSymmetry is compatible if they share the same Bravais lattice. No further requirement is needed.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-point-symmetry","page":"Symmetry Analysis","title":"2. Between lattice and point symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"In order for a point symmetry to be a good symmetry of the lattice, we need the Bravais lattice to be invariant under the point symmetry at least. In an infinite lattice, this is always the case, and no requires no checks. For finite size lattice, however, the situation is different: Since the finite size lattice with periodic boundary condition can be understood as an infinite lattice modulo supercell, the Bravais lattice of the supercell also needs to be invariant under all operations of the point symmetry. The requirement therefore is that the column vectors of the shape matrix after point operation remain integer multiples of themselves.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-translation-symmetry-and-point-symmetry.","page":"Symmetry Analysis","title":"3. Between translation symmetry and point symmetry.","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Same as 2.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-translation-symmetry-embedding.","page":"Symmetry Analysis","title":"4. Between lattice and translation symmetry embedding.","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Translation symmetry embedding is ","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"a TS PS L TSE PSE\nTS same matrix shape matrix invariant under point operation same shape matrix  \nPS     \nL     \nTSE     \nPSE     ","category":"page"}]
}
