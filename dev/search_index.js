var documenterSearchIndex = {"docs":
[{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_honeycomb_symmetry.jl\"","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Honeycomb-lattice-1","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#Preamble-1","page":"Honeycomb lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Plots\n\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_honeycomb_symmetry\")\nextent = [-2.5, 2.5, -2.5, 2.5]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4]);\nnothing #hide","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Set-up-lattice-and-symmetry-1","page":"Honeycomb lattice","title":"Set up lattice and symmetry","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"scale_matrix = [2 2; -2 4]\n@assert det(scale_matrix) ≈ 12\n\nunitcell = make_unitcell([1 -0.5; 0 0.5*sqrt(3.0)])\naddorbital!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5/sqrt(3)]))\naddorbital!(unitcell, \"B\", carte2fract(unitcell, [0.5,-0.5/sqrt(3)]))\n\nlattice = make_lattice(unitcell, scale_matrix)\n\ntsymbed = translation_symmetry_embedding(lattice)\ntsym = symmetry(tsymbed)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\npsymbed = embed(lattice, psym)\n\nprint(\"Point group: \", psym.hermann_mauguinn)","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Permutations-1","page":"Honeycomb lattice","title":"Permutations","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"println(\"Translation permutations\")\nprintln(\"------------------------\")\n\nfor t in tsymbed\n    println(t)\nend\nprintln()\n\nprintln(\"Point permutations\")\nprintln(\"------------------\")\nfor p in psymbed\n    println(p)\nend\nprintln()","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-translation-symmetry-embeddings-1","page":"Honeycomb lattice","title":"Plots for translation symmetry embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.orbitals)\n        orbfc = getorbitalcoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-point-symmetry-embeddings-1","page":"Honeycomb lattice","title":"Plots for point symmetry embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.orbitals)\n        orbfc = getorbitalcoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"","category":"page"},{"location":"generated/example_honeycomb_symmetry/#","page":"Honeycomb lattice","title":"Honeycomb lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_point_group_4mm/#","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_4mm.jl\"","category":"page"},{"location":"generated/example_point_group_4mm/#Point-group-4mm-(Cᵥ)-1","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"","category":"section"},{"location":"generated/example_point_group_4mm/#Preamble-1","page":"Point group 4mm (C₄ᵥ)","title":"Preamble","text":"","category":"section"},{"location":"generated/example_point_group_4mm/#","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"using TightBindingLattice\nusing Formatting: printfmt\n\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/#Irreps-of-4mm-1","page":"Point group 4mm (C₄ᵥ)","title":"Irreps of 4mm","text":"","category":"section"},{"location":"generated/example_point_group_4mm/#","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"point_symmetry = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0])\nprintln(\"symmetry: \", point_symmetry.hermann_mauguinn)\nprintln(\"order: \", group_order(point_symmetry))\nprintln(\"irreducible_representations:\")\nfor irrep_index in 1:num_irreps(point_symmetry)\n    println(\"- name: GM($irrep_index)\")\n    println(\"  elements:\")\n    for (ename, mat) in zip(element_names(point_symmetry), irrep(point_symmetry, irrep_index))\n        println(\"  - name: \\\"$ename\\\"\")\n        m = Int.(real.(mat))\n        if size(m, 1) == 1\n            println(\"    matrix: $(first(m))\")\n        else\n            println(\"    matrix: |-\")\n            display_matrix(stdout, m; prefix=\"      \")\n        end\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/#","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"","category":"page"},{"location":"generated/example_point_group_4mm/#","page":"Point group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_group_isomorphism.jl\"","category":"page"},{"location":"generated/example_group_isomorphism/#Group-isomorphism-1","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#Set-up-basic-functions-1","page":"Group isomorphism","title":"Set up basic functions","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"using TightBindingLattice\nusing Formatting\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            print(io, icol == 1 ? prefix : \" \")\n            printfmt(io, \"{:>$(width)s}\", \"$col\")\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_group_isomorphism/#Generate-two-isomorphic-groups-1","page":"Group isomorphism","title":"Generate two isomorphic groups","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"group1 = FiniteGroup([1 2 3 4;\n                      2 1 4 3;\n                      3 4 2 1;\n                      4 3 1 2]);\ngroup2 = let mtab1 = group1.multiplication_table,\n             mtab2 = zeros(Int, (4, 4)),\n             mapping = [1, 3, 2, 4]\n             for i in 1:4, j in 1:4\n                 mtab2[mapping[i], mapping[j]] = mapping[mtab1[i,j]]\n             end\n             FiniteGroup(mtab2)\n         end;\nnothing #hide","category":"page"},{"location":"generated/example_group_isomorphism/#Group-multiplication-tables-1","page":"Group isomorphism","title":"Group multiplication tables","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"println(\"Multiplication table of G₁\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group1))\nprintln()\n\nprintln(\"Multiplication table of G₂\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group2))\nprintln()","category":"page"},{"location":"generated/example_group_isomorphism/#Group-isomorphism-2","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"println(\"Group isomorphism  ϕ: G₁ → G₂\")\nprintln(\"-----------------------------\")\nϕ = group_isomorphism(group1, group2)\nfor g in 1:group_order(group1)\n    println(\"  ϕ($g) = $(ϕ[g])\")\nend\nprintln()\n\nmtab2 = zeros(Int, (group_order(group1), group_order(group1)))\nfor g in 1:group_order(group1), h in 1:group_order(group1)\n    mtab2[ϕ[g], ϕ[h]] = ϕ[ group_product(group1, g, h) ]\nend\n\nprintln(\"Multiplication table of ϕ(G₁)\")\nprintln(\"-----------------------------\")\ndisplay_matrix(stdout, mtab2)\nprintln()\nprintln(\"  ϕ(g)⋅ϕ(h) = ϕ(g⋅h)\")\nprintln(\"  ϕ(G₁) ≡ G₂ should hold.\")","category":"page"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"","category":"page"},{"location":"generated/example_group_isomorphism/#","page":"Group isomorphism","title":"Group isomorphism","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_symmetry_kspace_honeycomb.jl\"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Little-Symmetry-1","page":"Honeycomb lattice in k-space","title":"Little Symmetry","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"using LinearAlgebra\nusing Plots\nusing TightBindingLattice\n\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nfunction makewithin(extent::AbstractVector{<:Real})\n    a, b, c, d = extent\n    (x::Real, y::Real) -> ((a <= x <= b) && (c <= y <= d))\nend\nmkpath(\"example_little_symmetry_kspace_honeycomb\")","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Honeycome-lattice-1","page":"Honeycomb lattice in k-space","title":"Honeycome lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Define-Unitcell-1","page":"Honeycomb lattice in k-space","title":"Define Unitcell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"latticevectors = [1 -0.5; 0 sqrt(3)*0.5];\nunitcell = make_unitcell(latticevectors; OrbitalType=String);\naddorbital!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5 / sqrt(3)]));\naddorbital!(unitcell, \"B\", carte2fract(unitcell, [0.5, -0.5 / sqrt(3)]));\nnothing #hide","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-1","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-2, 2, -2, 2]\n    within = makewithin(extent)\n    for i1 in -5:5, i2 in -5:5\n        R = latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in unitcell.orbitals\n            orb_cc = fract2carte(unitcell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-3-supercell-1","page":"Honeycomb lattice in k-space","title":"√3 × √3 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-1","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [2 -1; 1 1]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-2","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-4, 4, -4, 4]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.orbitals\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-1","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguinn): $(psym.hermann_mauguinn)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguinn)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space-1","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguinn)\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(400, 500), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-23-supercell-1","page":"Honeycomb lattice in k-space","title":"2√3 × 2√3 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-2","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [2 2; -2 4]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-3","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.orbitals\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-2","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguinn): $(psym.hermann_mauguinn)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguinn)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space-2","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguinn)\n                #push!(generatornames, join(psym_little.element_names[psym_little.generators], \"<br>\"))\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(600, 750), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#6-supercell-1","page":"Honeycomb lattice in k-space","title":"6 × 6 supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-3","page":"Honeycomb lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"shape = [6 0; 0 6]\nlattice = make_lattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-lattice-4","page":"Honeycomb lattice in k-space","title":"Plot lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.orbitals\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-3","page":"Honeycomb lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguinn): $(psym.hermann_mauguinn)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguinn)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-momentum-space-3","page":"Honeycomb lattice in k-space","title":"Plot momentum space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguinn)\n                #push!(generatornames, join(psym_little.element_names[psym_little.generators], \"<br>\"))\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(800, 1000), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#","page":"Honeycomb lattice in k-space","title":"Honeycomb lattice in k-space","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_kagome_symmetry.jl\"","category":"page"},{"location":"generated/example_kagome_symmetry/#Kagome-Lattice-1","page":"Kagome lattice","title":"Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#Preamble-1","page":"Kagome lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Printf\nusing Plots\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_kagome_symmetry\")\nextent = [-2, 2, -2, 2]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4])","category":"page"},{"location":"generated/example_kagome_symmetry/#Generate-Kagome-Lattice-1","page":"Kagome lattice","title":"Generate Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"function make_kagome_lattice(size_matrix ::AbstractMatrix{<:Integer})\n    latticevectors = [1 -0.5; 0 0.5*sqrt(3.0)];\n    unitcell = make_unitcell(latticevectors, OrbitalType=String)\n    addorbital!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.0]))\n    addorbital!(unitcell, \"B\", carte2fract(unitcell, [0.25, 0.25*sqrt(3.0)]))\n    addorbital!(unitcell, \"C\", carte2fract(unitcell, [0.5+0.25, 0.25*sqrt(3.0)]))\n\n    nnbondtypes = [\n        ([ 0, 0], \"A\", [ 0, 0], \"B\", 1),\n        ([ 0, 0], \"A\", [ 0, 0], \"C\", 1),\n        ([ 0, 0], \"B\", [ 0, 0], \"C\", 1),\n        ([ 1, 1], \"A\", [ 1, 0], \"B\",-1),\n        ([ 1, 0], \"B\", [ 0, 0], \"C\",-1),\n        ([ 0, 0], \"C\", [ 1, 1], \"A\",-1),\n    ]\n\n    nnnbondtypes = [\n        ([ 0, 0], \"A\", [ 1, 0], \"B\", 1), # ◁\n        ([ 1, 0], \"B\", [ 0,-1], \"C\", 1),\n        ([ 0,-1], \"C\", [ 0, 0], \"A\", 1),\n        ([ 0, 0], \"C\", [ 1, 0], \"A\",-1),\n        ([ 1, 0], \"A\", [ 0,-1], \"B\",-1), # ▷\n        ([ 0,-1], \"B\", [ 0, 0], \"C\",-1),\n    ]\n\n    lattice = make_lattice(unitcell, size_matrix)\n    orthocube = lattice.orthocube\n    supercell = lattice.supercell\n    tsym = TranslationSymmetry(lattice)\n    psym = little_symmetry(tsym, project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0]))\n    tsymbed = embed(lattice, tsym)\n    psymbed = embed(lattice, psym)\n    ssymbed = tsymbed ⋊ psymbed\n\n    nnbonds = []\n    nnnbonds = []\n\n    for r in lattice.bravais_coordinates\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.orbitalindices, roworb_super, -1)\n            icol = get(supercell.orbitalindices, colorb_super, -1)\n            push!(nnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.orbitalindices, roworb_super, -1)\n            icol = get(supercell.orbitalindices, colorb_super, -1)\n            push!(nnnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n    end\n\n    nn_triangles = []\n    for r in lattice.bravais_coordinates\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[1:3]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.orbitalindices, roworb_super, -1)\n        icol = get(supercell.orbitalindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, 1))\n\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[4:6]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.orbitalindices, roworb_super, -1)\n        icol = get(supercell.orbitalindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, -1))\n    end\n\n    return (unitcell=unitcell,\n            lattice=lattice,\n            space_symmetry_embedding=ssymbed,\n            nearest_neighbor_bonds=nnbonds,\n            next_nearest_neighbor_bonds=nnnbonds,\n            nearest_neighbor_triangles=nn_triangles)\nend","category":"page"},{"location":"generated/example_kagome_symmetry/#Symmetry-analysis-1","page":"Kagome lattice","title":"Symmetry analysis","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"kagome = make_kagome_lattice([4 -2; 2 2])\n\ntsymbed = kagome.space_symmetry_embedding.normal\npsymbed = kagome.space_symmetry_embedding.rest\ntsym = symmetry(tsymbed)\npsym = symmetry(psymbed)\n\nprintln(\"Point Symmetry\")\nprintln(\"==============\")\nprintln()\nprintln(\"Point group: \", psym.hermann_mauguinn)\nprintln(\"Number of elements: \", group_order(psym))\nprintln(\"Number of irreps: \", num_irreps(psym))","category":"page"},{"location":"generated/example_kagome_symmetry/#Orbital-map-1","page":"Kagome lattice","title":"Orbital map","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"orbital_map = findorbitalmap(kagome.lattice.unitcell, psym)\n\nprintln(\"Orbital map\")\nprintln(\"-----------\")\nprintln()\n\nfor (n, map) in zip(element_names(psym), orbital_map)\n    @printf(\"%32s:\", n)\n    for (i_elem, (j_elem, R)) in enumerate(map)\n        @printf(\"  %d ↦ %d, %-8s\", i_elem, j_elem, string(R))\n    end\n    println()\nend\nprintln()","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Translation-Symmetry-1","page":"Kagome lattice","title":"Plot Translation Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.orbitals)\n        orbfc = getorbitalcoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Point-Symmetry-1","page":"Kagome lattice","title":"Plot Point Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.orbitals)\n        orbfc = getorbitalcoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"","category":"page"},{"location":"generated/example_kagome_symmetry/#","page":"Kagome lattice","title":"Kagome lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_3d.jl\"","category":"page"},{"location":"generated/example_little_group_3d/#Little-group-3D-1","page":"Little group in 3d","title":"Little group 3D","text":"","category":"section"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"using TightBindingLattice\n\nunitcell = make_unitcell([1.0 0.0 0.0; 0.0 1.0 0.0; 0 0 1]; OrbitalType=String)\naddorbital!(unitcell, \"Ox\", FractCoord([0,0,0], [0.5, 0.0, 0.0]))\naddorbital!(unitcell, \"Oy\", FractCoord([0,0,0], [0.0, 0.5, 0.0]))","category":"page"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"Currently, make_lattice in three-dimension is unsupported","category":"page"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"lattice = make_lattice(unitcell, [4 0 0; 0 4 0; 0 0 3], [1 0 0; 0 1 0; 0 0 1])\ntsym = TranslationSymmetry(lattice.orthocube, [1 0 0; 0 1 0; 0 0 1])\npsym = project(PointSymmetryDatabase.get(15), [1 0 0; 0 1 0; 0 0 1])\n\nfor idx in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little1 = little_symmetry(tsym, idx, psym)\n    psym_little2 = TightBindingLattice.little_symmetry_iso(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group1: { name: \\\"$(psym_little1.hermann_mauguinn)\\\", order: $(group_order(psym_little1)) }\")\n    println(\"  little_point_group2: { name: \\\"$(psym_little2.hermann_mauguinn)\\\", order: $(group_order(psym_little2)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little1_compatible: $(iscompatible(tsym, idx, psym_little1))\")\n    println(\"  is_psym_little2_compatible: $(iscompatible(tsym, idx, psym_little2))\")\nend","category":"page"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"","category":"page"},{"location":"generated/example_little_group_3d/#","page":"Little group in 3d","title":"Little group in 3d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_orthocube.jl\"","category":"page"},{"location":"generated/example_orthocube/#Orthocube-Examples-(Bravais-Lattice)-1","page":"Orthocube","title":"Orthocube Examples (Bravais Lattice)","text":"","category":"section"},{"location":"generated/example_orthocube/#Preamble-1","page":"Orthocube","title":"Preamble","text":"","category":"section"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"using TightBindingLattice\nusing Plots\nmkpath(\"example_orthocube\")\n\nfunction draw_orthocube(orthocube::OrthoCube, coordinates::AbstractMatrix{<:Integer})\n    xlim = (minimum(coordinates[1,:]) - 3.5, maximum(coordinates[1,:]) + 3.5)\n    ylim = (minimum(coordinates[2,:]) - 3.5, maximum(coordinates[2,:]) + 3.5)\n    boundary = let\n        r0 = [0,0]\n        r1 = orthocube.shape_matrix[:,1]\n        r2 = orthocube.shape_matrix[:,2]\n        hcat(r0, r1, r1 .+ r2, r2, r0)\n    end\n    fig = plot(boundary[1,:], boundary[2,:], label=\"\", size=(400, 400))\n    for Ri in Iterators.product(-1:1, -1:1)\n        alpha = (Ri == (0,0)) ? 1.0 : 0.1\n        Rr = orthocube.shape_matrix * [Ri...]\n        scatter!(coordinates[1,:] .+ Rr[1], coordinates[2,:] .+ Rr[2], aspect_ratio=1, markersize=12, xlim=xlim, ylim=ylim, markeralpha=alpha, label=\"\")\n        annotation = []\n        for i in 1:size(coordinates, 2)\n            x = coordinates[1,i] + Rr[1]\n            y = coordinates[2,i] + Rr[2]\n            if xlim[1] < x < xlim[2] && ylim[1] < y < ylim[2]\n                push!(annotation, (x, y, text(\"$i\", 8, :black, :center)))\n            end\n        end\n        if !isempty(annotation)\n            annotation = [annotation...]\n            annotate!(annotation)\n        end\n    end\n    fig\nend","category":"page"},{"location":"generated/example_orthocube/#(4,-4)-x-(4,4)-1","page":"Orthocube","title":"(4,-4) x (4,4)","text":"","category":"section"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"size_matrix = [ 4 4; -4 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(4,-4)x(4,4).svg\")","category":"page"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/#(2,-2)-x-(2,4)-1","page":"Orthocube","title":"(2,-2) x (2,4)","text":"","category":"section"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"size_matrix = [ 2 2; -2 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\ndraw_orthocube(orthocube, coordmat)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(2,-2)x(2,4).svg\")","category":"page"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"","category":"page"},{"location":"generated/example_orthocube/#","page":"Orthocube","title":"Orthocube","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#TightBindingLattice-1","page":"Home","title":"TightBindingLattice","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Lattice.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Group has group structure. Examples are FiniteAbelianGroup, GenericGroup","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Multiplication table\norder (period length) of every element","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Symmetry is the \"presentation\" of group.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Symmetry on the other hand, is a representation of the group structure in some space. Examples are: TranslationSymmetry, PointSymmetry. Members are","category":"page"},{"location":"#","page":"Home","title":"Home","text":"group\ngenerators\nconjugacy_classes\ncharacter_table\nirreps\nelement names","category":"page"},{"location":"#","page":"Home","title":"Home","text":"PointSymmetry has additional info","category":"page"},{"location":"#","page":"Home","title":"Home","text":"matrix_representations (i.e. representation in units of lattice vectors)\nSchoenflies\nHermann Mauguinn","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [TightBindingLattice]","category":"page"},{"location":"#TightBindingLattice.CarteCoord","page":"Home","title":"TightBindingLattice.CarteCoord","text":"CarteCoord\n\nCartesian coordinates. Vector{Float64}.\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.FractCoord","page":"Home","title":"TightBindingLattice.FractCoord","text":"FractCoord\n\nFractional coordinates.\n\nMembers\n\nwhole ::Vector{Int}: Integer part of fractional coordinates\nfraction ::Vector{Float64}: [0,1) part of fractional coordinates\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.IdentityOperation","page":"Home","title":"TightBindingLattice.IdentityOperation","text":"IdentityOperation{S<:Real}\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.Permutation","page":"Home","title":"TightBindingLattice.Permutation","text":"    Permutation(perms; max_order=2048)\n\nCreate a permutation of integers from 1 to n. perms should be a permutation of 1:n.\n\nArguments\n\nperms: an integer vector containing a permutation of integers from 1 to n\nmax_order: maximum order\n\nNote\n\nThe convention for the permutation is that map[i] gets mapped to i. In other words, map tells you where each element is from.\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.PointOperation","page":"Home","title":"TightBindingLattice.PointOperation","text":"PointOperation{S<:Real}\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.PointSymmetry","page":"Home","title":"TightBindingLattice.PointSymmetry","text":"PointSymmetry\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.SitePermutation","page":"Home","title":"TightBindingLattice.SitePermutation","text":"SitePermutation\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.SpaceOperation","page":"Home","title":"TightBindingLattice.SpaceOperation","text":"SpaceOperation{Tp<:Real, Tt<:Real}\n\nS: r ↦ M ⋅ ( r + R )\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.SymmetryEmbedding","page":"Home","title":"TightBindingLattice.SymmetryEmbedding","text":"SymmetryEmbedding{SymmetryType<:AbstractSymmetry}\n\nMembers\n\nlattice::Lattice\nsymmetry::SymmetryType\nelements::Vector{SitePermutation}\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.SymmorphicIrrepComponent","page":"Home","title":"TightBindingLattice.SymmorphicIrrepComponent","text":"SymmorphicIrrepComponent{S1<:SymmetryOrEmbedding, S2<:SymmetryOrEmbedding}\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.SymmorphicSymmetry","page":"Home","title":"TightBindingLattice.SymmorphicSymmetry","text":"SymmorphicSymmetry{S1, S2, E}\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.UnitCell","page":"Home","title":"TightBindingLattice.UnitCell","text":"UnitCell{O}\n\nParameters\n\nO: type of \"orbital\". Any type can be used, but we recommend using String or tuple of String and Int      for compatibility with JSON.\n\nMembers\n\nlatticevectors ::Array{Float64, 2}: Lattice vectors\nreducedreciprocallatticevectors ::Array{Float64, 2}: Reduced reciprocal lattice vectors (transpose of inverse of latticevectors)\nreciprocallatticevectors ::Array{Float64, 2}: Reciprocal lattice vectors. 2π * reducedreciprocallatticevectors\norbitals ::Vector{Tuple{T, FractCoord}}: List of orbitals within unit cell\norbitalindices ::Dict{T, Int}: Indices of orbitals\n\n\n\n\n\n","category":"type"},{"location":"#TightBindingLattice.addorbital!-Union{Tuple{O}, Tuple{UnitCell{O},O,FractCoord}} where O","page":"Home","title":"TightBindingLattice.addorbital!","text":"addorbital!\n\nAdd an orbital to the unit cell.\n\nArguments\n\nuc ::UnitCell{T}\norbitalname ::{T}\norbitalcoord ::FractCoord\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.apply_operation-Union{Tuple{S}, Tuple{IdentityOperation{S},AbstractArray{S,N} where N}} where S<:Real","page":"Home","title":"TightBindingLattice.apply_operation","text":"apply_operation(identity{S}, coordinate::AbstractArray{S}) where {S<:Real}\n\nDo nothing.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.apply_operation-Union{Tuple{S}, Tuple{PointOperation{S},AbstractArray{S,1}}} where S","page":"Home","title":"TightBindingLattice.apply_operation","text":"apply_operation(symop::PointOperation{S}, coordinate::AbstractArray{S}) where {S}\n\nApply point operation to the coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.apply_operation-Union{Tuple{S}, Tuple{TranslationOperation{S},AbstractArray{S,N} where N}} where S<:Real","page":"Home","title":"TightBindingLattice.apply_operation","text":"apply_operation(symop::TranslationOperation{S}, coordinate::AbstractArray{S}) where S\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.apply_operation-Union{Tuple{Tt}, Tuple{Tp}, Tuple{SpaceOperation{Tp,Tt},AbstractArray{#s38,N} where N where #s38<:Union{Tp, Tt}}} where Tt where Tp","page":"Home","title":"TightBindingLattice.apply_operation","text":"apply_operation(op::SpaceOperation{Tp, Tt}, coord::AbstractArray{<:Union{Tp, Tt}}) where {Tp, Tt}\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.carte2fract-Tuple{AbstractArray{#s27,2} where #s27<:Real,Array{Float64,1}}","page":"Home","title":"TightBindingLattice.carte2fract","text":"carte2fract\n\nArguments\n\nlatticevectors ::AbstractArray{<:AbstractFloat, 2}: square matrix whose columns are lattice vectors.\ncc ::CarteCoord: cartesian coordinates\ntol ::Real=Base.rtoldefault(Float64): tolerance\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.carte2fract-Tuple{UnitCell,Array{Float64,1}}","page":"Home","title":"TightBindingLattice.carte2fract","text":"carte2fract\n\nArguments\n\nlatticevectors ::Array{Float64, 2}\ncc ::CarteCoord\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.dimension-Tuple{FractCoord}","page":"Home","title":"TightBindingLattice.dimension","text":"dimension\n\nDimension of the fractional coordinates\n\nArguments\n\nfc ::FractCoord: Fractional coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.dimension-Tuple{UnitCell}","page":"Home","title":"TightBindingLattice.dimension","text":"dimension\n\nSpatial dimension of the unit cell.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.element-Tuple{FiniteGroup,Any}","page":"Home","title":"TightBindingLattice.element","text":"element(group, idx)\n\nReturn the element of index idx. For FiniteGroup, this is somewhat meaningless since the idxth element is idx. The sole purpose of this function is the bounds checking.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.element_name-Tuple{FiniteGroup,Any}","page":"Home","title":"TightBindingLattice.element_name","text":"element_name(group, idx)\n\nReturn the name of element at index idx, which is just the string of idx.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.element_names-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.element_names","text":"element_names(group)\n\nReturn the names of element.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.elements-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.elements","text":"elements(group)\n\nReturn the elements of the group.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.embed-Tuple{Lattice,PointOperation{#s91} where #s91<:Integer}","page":"Home","title":"TightBindingLattice.embed","text":"embed(lattice, point_operation)\n\nEmbed the simplest version of point operation. (no local unitary operation)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.embed-Tuple{Lattice,SpaceOperation{#s97,#s96} where #s96<:Integer where #s97<:Integer}","page":"Home","title":"TightBindingLattice.embed","text":"embed(lattice, sop::SpaceOperation{<:Integer, <:Integer})\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.embed-Tuple{Lattice,SymmorphicSymmetry}","page":"Home","title":"TightBindingLattice.embed","text":"embed(lattice::Lattice, ssym::SymmorphicSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.embed-Tuple{Lattice,TranslationOperation{#s91} where #s91<:Integer}","page":"Home","title":"TightBindingLattice.embed","text":"embed(lattice, translation_operation)\n\nEmbed the simplest version of integer translation (no mapping between orbitals etc.)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.findorbitalindex-Tuple{UnitCell,FractCoord}","page":"Home","title":"TightBindingLattice.findorbitalindex","text":"findorbitalindex\n\nReturns (orbitalindex, unitcellvector), or (-1, []) if not found.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.findorbitalmap-Tuple{UnitCell,PointOperation{#s95} where #s95<:Integer}","page":"Home","title":"TightBindingLattice.findorbitalmap","text":"findorbitalmap(unitcell, point_operation)\n\nFind which orbital gets mapped to which orbital with what lattice displacement. Return a vector of tuples (j, Rj) at index i, representing that the orbital i gets mapped to orbital j with lattice displacement Rj.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.findorbitalmap-Tuple{UnitCell,PointSymmetry}","page":"Home","title":"TightBindingLattice.findorbitalmap","text":"findorbitalmap(unitcell, point_symmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.findorbitalmap-Tuple{UnitCell,TranslationOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.findorbitalmap","text":"findorbitalmap(unitcell, translation_operation)\n\nFind which orbital gets mapped to which orbital with what lattice displacement. Return a vector of tuples (j, Rj) at index i, representing that the orbital i gets mapped to orbital j with lattice displacement Rj.\n\nThe overall transformation will be a combiation of (1) the result here, and (2) Bravais lattice transformation. Since all the integer translations will be taken care of by the Bravais lattice transformation, Rj here is all zero vectors.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.findorbitalmap-Tuple{UnitCell,TranslationSymmetry}","page":"Home","title":"TightBindingLattice.findorbitalmap","text":"findorbitalmap(unitcell, translation_symmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.fract2carte-Tuple{AbstractArray{#s36,2} where #s36<:Real,FractCoord}","page":"Home","title":"TightBindingLattice.fract2carte","text":"fract2carte\n\nArguments\n\nlatticevectors ::AbstractArray{<:AbstractFloat, 2}: square matrix whose columns are lattice vectors.\nfc ::FractCoord: fractional coordinates\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.fract2carte-Tuple{UnitCell,FractCoord}","page":"Home","title":"TightBindingLattice.fract2carte","text":"fract2carte\n\nArguments\n\nlatticevectors ::Array{Float64, 2}\nfc ::FractCoord\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.generate_subgroup-Tuple{FiniteGroup,Integer}","page":"Home","title":"TightBindingLattice.generate_subgroup","text":"generate_subgroup(group, idx)\n\nsubgroup generated by generators. ⟨ {g} ⟩\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.generate_subgroup-Union{Tuple{G}, Tuple{FiniteGroup,G}} where G<:(Union{#s32, #s31} where #s31<:(AbstractArray{#s28,1} where #s28<:Integer) where #s32<:(AbstractSet{#s29} where #s29<:Integer))","page":"Home","title":"TightBindingLattice.generate_subgroup","text":"generate_subgroup(group, generators)\n\nsubgroup generated by generators. ⟨ S ⟩\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.generator_elements-Tuple{SymmorphicSymmetry}","page":"Home","title":"TightBindingLattice.generator_elements","text":"generator_elements(sym::SymmorphicSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.generator_indices-Tuple{SymmorphicSymmetry}","page":"Home","title":"TightBindingLattice.generator_indices","text":"generator_indices(sym::SymmorphicSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.get_irrep_components-Tuple{SymmorphicSymmetryEmbedding}","page":"Home","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmorphicSymmetryEmbedding)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.get_irrep_components-Tuple{SymmorphicSymmetry}","page":"Home","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmorphicSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.get_irrep_components-Tuple{Union{#s99, #s98} where #s98<:AbstractSymmetryEmbedding where #s99<:AbstractSymmetry}","page":"Home","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmetryOrEmbedding)\n\nReturn a generator which gives IrrepComponent(sym, irrep_index, irrep_component).\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.get_irrep_iterator-Tuple{IrrepComponent}","page":"Home","title":"TightBindingLattice.get_irrep_iterator","text":"get_irrep_iterator(sic::IrrepComponent)\n\nReturn a generator which gives (element, amplitude), where amplitude is the irrep component of element.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.get_irrep_iterator-Tuple{SymmorphicIrrepComponent}","page":"Home","title":"TightBindingLattice.get_irrep_iterator","text":"get_irrep_iterator(ssic::SymmorphicIrrepComponent)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbital-Tuple{UnitCell,Integer}","page":"Home","title":"TightBindingLattice.getorbital","text":"getorbital\n\nArguments\n\nuc ::UnitCell{T}\nindex ::Integer\n\nReturn\n\n(orbitalname, fractcoord)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbital-Union{Tuple{O}, Tuple{UnitCell{O},O}} where O","page":"Home","title":"TightBindingLattice.getorbital","text":"getorbital\n\nGet the orbital (its orbital name and its fractional coordinates) with the given name.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\nReturn\n\n(orbitalname, fractcoord)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbitalcoord-Tuple{UnitCell,Integer}","page":"Home","title":"TightBindingLattice.getorbitalcoord","text":"getorbitalcoord\n\nArguments\n\nuc ::UnitCell\nidx ::Integer\n\nReturn\n\nfractcoord\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbitalcoord-Union{Tuple{O}, Tuple{UnitCell{O},O}} where O","page":"Home","title":"TightBindingLattice.getorbitalcoord","text":"getorbitalcoord\n\nGet the fractional coordinates of the orbital with the given name.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\nReturn\n\nfractcoord\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbitalindex-Union{Tuple{O}, Tuple{UnitCell{O},O}} where O","page":"Home","title":"TightBindingLattice.getorbitalindex","text":"getorbitalindex\n\nGet index of the given orbital.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbitalindexcoord-Union{Tuple{O}, Tuple{UnitCell{O},O}} where O","page":"Home","title":"TightBindingLattice.getorbitalindexcoord","text":"getorbitalindexcoord\n\nArguments\n\nuc ::UnitCell{T}\nname ::T\n\nReturn\n\n(index, fractcoord)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.getorbitalname-Tuple{UnitCell,Integer}","page":"Home","title":"TightBindingLattice.getorbitalname","text":"getorbitalname\n\nArguments\n\nuc ::UnitCell\nindex ::Integer\n\nReturn\n\norbitalname\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_inverse-Tuple{FiniteGroup,Integer}","page":"Home","title":"TightBindingLattice.group_inverse","text":"group_inverse(group, g)\n\nGet inverse of element/elements g.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_inverse-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.group_inverse","text":"group_inverse(group)\n\nGet a function which gives inverse.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_isomorphism-Tuple{FiniteGroup,FiniteGroup}","page":"Home","title":"TightBindingLattice.group_isomorphism","text":"group_isomorphism(group1, group2)\n\nFind the isomorphism ϕ: G₁ → G₂. Return nothing if not isomorphic.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_multiplication_table-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(group)\n\nReturn multiplcation table of the group.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_multiplication_table-Union{Tuple{AbstractArray{ElementType,1}}, Tuple{ElementType}, Tuple{AbstractArray{ElementType,1},Function}} where ElementType","page":"Home","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(elements, product=(*))\n\nGenerate a multiplication table from elements with product.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_order-Tuple{FiniteGroup,Any}","page":"Home","title":"TightBindingLattice.group_order","text":"group_order(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_order-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.group_order","text":"group_order(group)\n\nOrder of group (i.e. number of elements)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_order-Tuple{IrrepComponent}","page":"Home","title":"TightBindingLattice.group_order","text":"group_order(sic::IrrepComponent)\n\nGet order of the symmetry group of sic.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_product-Tuple{FiniteGroup,Integer,Integer}","page":"Home","title":"TightBindingLattice.group_product","text":"group_product(group, lhs, rhs)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.group_product-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.group_product","text":"group_product(group)\n\nReturn a function which computes the group product.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.hasorbital-Union{Tuple{O}, Tuple{UnitCell{O},O}} where O","page":"Home","title":"TightBindingLattice.hasorbital","text":"hasorbital{T}\n\nTest whether the unit cell contains the orbital of given name.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.isabelian-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.isabelian","text":"isabelian(group)\n\nCheck if the group is abelian.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.isbragg-Tuple{AbstractArray{#s96,1} where #s96<:(Rational{#s95} where #s95<:Integer),AbstractArray{#s94,1} where #s94<:Integer}","page":"Home","title":"TightBindingLattice.isbragg","text":"isbragg(k, t)\n\nCheck for Bragg condition at momentum k and translation t. Fractional momentum is normalized to 1, i.e. lies within [0, 1)ⁿ\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.isbragg-Tuple{TranslationSymmetry,Integer,AbstractArray{#s97,1} where #s97<:(TranslationOperation{#s96} where #s96<:Integer)}","page":"Home","title":"TightBindingLattice.isbragg","text":"isbragg(tsym, tsym_irrep_index, translations)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.isbragg-Tuple{TranslationSymmetry,Integer,TranslationOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.isbragg","text":"isbragg(tsym, tsym_irrep_index, translation)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsic, psym)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{Lattice,PointOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(lattice, point_operation)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{Lattice,PointSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(lattice, point_symmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{Lattice,TranslationOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(lattice, translation_operation)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{Lattice,TranslationSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(lattice, translation_symmetry)\n\nTest whether lattice and the symmetry are compatible. For translation symmetry, this means that the hypercubic lattice for both are the same.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{OrthoCube,PointOperation{#s97} where #s97<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(orthocube, operator::PointOperation{<:Integer})\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{OrthoCube,PointSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(orthocube, symmetry::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{OrthoCube,TranslationOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(orthocube, operator::TranslationOperation{<:Integer})\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{OrthoCube,TranslationSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(orthocube, symmetry::TranslationSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{PointSymmetry,TranslationSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(psym::PointSymmetry, tsym::TranslationSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{SymmetryEmbedding{TranslationSymmetry},Integer,SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsymbed, tsym_irrep_index, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry irrep defined by tsym_irrep_index and symmetry(tsymbed). In other words, the little group elements \n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsymbed, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry embedding tsymbed, i.e. whether they have the same \"lattice\".\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{TranslationSymmetry,Integer,PointOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsym, tsym_irrep_index, point_operation)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{TranslationSymmetry,Integer,PointSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsym, tsym_irrep_index, psym)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{TranslationSymmetry,PointOperation{#s98} where #s98<:Integer}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsym::TranslationSymmetry, pop::PointOperation{<:Integer})\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Tuple{TranslationSymmetry,PointSymmetry}","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsym::TranslationSymmetry, psym::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.iscompatible-Union{Tuple{E}, Tuple{S2}, Tuple{S1}, Tuple{Lattice,SymmorphicSymmetry{S1,S2,E}}} where E where S2 where S1","page":"Home","title":"TightBindingLattice.iscompatible","text":"iscompatible(lattice::Lattice, ssym::SymmorphicSymmetry{S1, S2, E}) where {S1, S2, E}\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.ishomomorphic-Tuple{FiniteGroup,AbstractArray{T,1} where T}","page":"Home","title":"TightBindingLattice.ishomomorphic","text":"ishomomorphic(group, representation; product=(*), equal=(==))\n\nCheck whether representation is homomorphic to group under product and equal, order preserved.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.issubgroup-Tuple{FiniteGroup,AbstractSet{#s38} where #s38<:Integer}","page":"Home","title":"TightBindingLattice.issubgroup","text":"issubgroup(group, subset)\n\nCheck whether the given subset is a subgroup of group.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.linpath-Tuple{Vararg{AbstractArray{T,1} where T,N} where N}","page":"Home","title":"TightBindingLattice.linpath","text":"momentumpath\n\nGenerate a list of momenta\n\nArguments\n\nanchorpoints\n(Optional) nseg - number of points in each segment\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Home","title":"TightBindingLattice.little_group","text":"little_group(tsic, psym)\n\nReturn the FiniteGroup object that corresponds to the little group of psym at tsic.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group-Tuple{TranslationSymmetry,Integer,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_group","text":"little_group(tsym, tsym_irrep_index, psym)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group-Tuple{TranslationSymmetry,PointSymmetry,AbstractArray{#s94,1} where #s94<:Integer}","page":"Home","title":"TightBindingLattice.little_group","text":"little_group(tsym, psym, elements)\n\nGenerate a little group with given elements. The elements of the little group, which may be sparse, are compressed into consecutive integers.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group_elements-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Home","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsic, psym)\n\nGet the little group elements (i.e. indices) of psym corresponding to the irrep of translation symmetry specified by tsic. tsic and psym are either\n\nIrrepComponent{TranslationSymmetry} and PointSymmetry, or\nIrrepComponent{SymmetryEmbedding{TranslationSymmetry}} and SymmetryEmbedding{PointSymmetry}\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group_elements-Tuple{SymmetryEmbedding{TranslationSymmetry},Integer,SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group_elements-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsymbed, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group_elements-Tuple{TranslationSymmetry,Integer,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsym, tsym_irrep_index, psym)\n\nReturn elements of psym compatible with the translation symmetry tsym at  irrep tsym_irrep_index\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_group_elements-Tuple{TranslationSymmetry,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsym, psym)\n\nReturn elements of psym compatible with the translation symmetry tsym.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Home","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsic, psym)\n\nReturn the PointSymmetry object that corresponds to the little group of psym at tsic.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry-Tuple{SymmetryEmbedding{TranslationSymmetry},Integer,SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Home","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsymbed, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry-Tuple{TranslationSymmetry,Integer,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsym, tsym_irrep_index, psym)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry-Tuple{TranslationSymmetry,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsym, psym)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.little_symmetry_iso-Tuple{TranslationSymmetry,Integer,PointSymmetry}","page":"Home","title":"TightBindingLattice.little_symmetry_iso","text":"little_symmetry_iso(tsym, tsym_irrep_index, psym)\n\nFind little symmetry using group isomorphism\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.make_unitcell-Tuple{AbstractArray{#s33,2} where #s33<:Real}","page":"Home","title":"TightBindingLattice.make_unitcell","text":"UnitCell\n\nConstruct an n-dimensional lattice.\n\nArguments\n\nlatticevectors ::AbstractArray{<:AbstractFloat, 2}: Lattice vectors\nOrbitalType::DataType\n\nOptional Arguments\n\ntol=√ϵ: Epsilon\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.make_unitcell-Tuple{Real}","page":"Home","title":"TightBindingLattice.make_unitcell","text":"UnitCell\n\nConstruct a one-dimensional lattice.\n\nArguments\n\nlatticeconstant ::Float64: Lattice constant\nOrbitalType: List of orbitals\n\nOptional Arguments\n\ntol=√ϵ: Tolerance\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.minimal_generating_set-Tuple{FiniteGroup}","page":"Home","title":"TightBindingLattice.minimal_generating_set","text":"minimal_generating_set(group)\n\nGet minimally generating set of the finite group.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.momentumgrid-Tuple{UnitCell,AbstractArray{#s38,1} where #s38<:Integer}","page":"Home","title":"TightBindingLattice.momentumgrid","text":"momentumgrid\n\nGenerate an n-dimensional grid of momenta of given shape\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.numorbital-Tuple{UnitCell}","page":"Home","title":"TightBindingLattice.numorbital","text":"numorbital\n\nNumber of orbitals of the unit cell.\n\nArguments\n\nuc ::UnitCell\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.period_length-Tuple{FiniteGroup,Any}","page":"Home","title":"TightBindingLattice.period_length","text":"period_length(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.project-Tuple{PointSymmetry,AbstractArray{#s95,2} where #s95<:Integer}","page":"Home","title":"TightBindingLattice.project","text":"project(psym, projection; tol=√ϵ)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.read_point_symmetry-Tuple{AbstractDict}","page":"Home","title":"TightBindingLattice.read_point_symmetry","text":"read_point_symmetry(data::AbstractDict)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.symmetry_product-Tuple{PointSymmetry}","page":"Home","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(psym::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.symmetry_product-Tuple{TranslationSymmetry}","page":"Home","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(tsym::TranslationSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.symmetry_product-Union{Tuple{SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,S}}, Tuple{S}} where S<:(SpaceOperation{#s96,Tt} where Tt<:Real where #s96<:Integer)","page":"Home","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(sym::SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,S}) where {S<:SpaceOperation{<:Integer}}\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.translation_symmetry_embedding-Tuple{Lattice}","page":"Home","title":"TightBindingLattice.translation_symmetry_embedding","text":"translation_symmetry_embedding(lattice::Lattice)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.whichunitcell-Union{Tuple{O}, Tuple{UnitCell{O},O,Array{Float64,1}}} where O","page":"Home","title":"TightBindingLattice.whichunitcell","text":"whichunitcell\n\nReturn\n\nR ::Vector{Int}: which unit cell the specificied orbital/cartesian coordinates belongs to.\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.whichunitcell-Union{Tuple{O}, Tuple{UnitCell{O},O,FractCoord}} where O","page":"Home","title":"TightBindingLattice.whichunitcell","text":"whichunitcell\n\nReturn\n\nR ::Vector{Int}: which unit cell the specificied orbital/cartesian coordinates belongs to.\n\n\n\n\n\n","category":"method"},{"location":"#Base.:*-Tuple{Permutation,Permutation}","page":"Home","title":"Base.:*","text":"    *(p1 ::Permutation, p2 ::Permutation)\n\nMultiply the two permutation. NOT THIS: (Return [p2.map[x] for x in p1.map].) BUT THIS: Return [p1.map[x] for x in p2.map].\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> Permutation([2,1,3]) * Permutation([1,3,2])\nPermutation([2, 3, 1], 3)\n\njulia> Permutation([1,3,2]) * Permutation([2,1,3])\nPermutation([3, 1, 2], 3)\n\n\n\n\n\n","category":"method"},{"location":"#Base.:^-Tuple{Permutation,Integer}","page":"Home","title":"Base.:^","text":"^(perm ::Permutation, pow ::Integer)\n\nExponentiate the permutation.\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> Permutation([2,3,4,1])^2\nPermutation([3, 4, 1, 2], 2)\n\n\n\n\n\n","category":"method"},{"location":"#TightBindingLattice.conjugacy_class-Tuple{FiniteGroup,Integer}","page":"Home","title":"TightBindingLattice.conjugacy_class","text":"conjugacy_class(group, i)\n\nConjugacy class of the element i.\n\n\n\n\n\n","category":"method"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_2d.jl\"","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group-in-2D-1","page":"Little group in 2d","title":"Little Group in 2D","text":"","category":"section"},{"location":"generated/example_little_group_2d/#Preamble-1","page":"Little group in 2d","title":"Preamble","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"using TightBindingLattice\nusing Formatting\nusing Plots\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_little_group_2d/#Set-up-lattice-and-symmetry-1","page":"Little group in 2d","title":"Set up lattice and symmetry","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"unitcell = make_unitcell([1.0 0.0; 0.0 1.0]; OrbitalType=String);\naddorbital!(unitcell, \"Ox\", FractCoord([0,0], [0.5, 0.0]));\naddorbital!(unitcell, \"Oy\", FractCoord([0,0], [0.0, 0.5]));\n\nlattice = make_lattice(unitcell, [4 0; 0 4]);\ntsym = TranslationSymmetry(lattice);\npsym = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0]);\nnothing #hide","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group-1","page":"Little group in 2d","title":"Little Group","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"lge = little_group_elements(tsym, 2, psym)\nlg = little_group(tsym, 2, psym)\nprintln(\"Little group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg))\n\n\nlg_matrep = psym.matrix_representations[lge]\nprintln(\"Matrix representations: $lg_matrep\")","category":"page"},{"location":"generated/example_little_group_2d/#Finding-point-groups-isomorphic-to-the-little-group-1","page":"Little group in 2d","title":"Finding point groups isomorphic to the little group","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"little_symmetry_candidates = Tuple{PointSymmetry, Vector{Int}}[]\nfor i in 1:32\n    ps = PointSymmetryDatabase.get(i)\n    ϕ = group_isomorphism(lg, ps.group)\n    if !isnothing(ϕ)\n        push!(little_symmetry_candidates, (ps, ϕ))\n    end\nend\n(psym2, ϕ) = first(little_symmetry_candidates)\n\nlg_matrep2 = lg_matrep[ϕ]\nprintln(\"Matrix representations (isomorphic): $lg_matrep2\")","category":"page"},{"location":"generated/example_little_group_2d/#Multiplication-Tables-1","page":"Little group in 2d","title":"Multiplication Tables","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"println(\"Parent point group\")\nprintln(\"------------------\")\ndisplay_matrix(stdout, group_multiplication_table(psym2))\nprintln(\"Little group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep))\nprintln(\"Isomorphic little group\")\nprintln(\"-----------------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep2))","category":"page"},{"location":"generated/example_little_group_2d/#Irreps-and-Little-Groups-1","page":"Little group in 2d","title":"Irreps and Little Groups","text":"","category":"section"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"println(\"Irreps and Little Groups\")\nprintln(\"------------------------\")\nfor tsic in get_irrep_components(tsym)\n    idx = tsic.irrep_index\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group: { name: \\\"$(psym_little.hermann_mauguinn)\\\", order: $(group_order(psym_little)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little_compatible: $(iscompatible(tsym, idx, psym_little))\")\nend","category":"page"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"","category":"page"},{"location":"generated/example_little_group_2d/#","page":"Little group in 2d","title":"Little group in 2d","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_point_group_elements/#","page":"Point group elements","title":"Point group elements","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_elements.jl\"","category":"page"},{"location":"generated/example_point_group_elements/#","page":"Point group elements","title":"Point group elements","text":"Search elements by their Seitz name, and show their matrix representations","category":"page"},{"location":"generated/example_point_group_elements/#","page":"Point group elements","title":"Point group elements","text":"using TightBindingLattice\n\nall_elements = Dict()\nprint(\"# Reading groups\")\nfor i in 1:32\n    print(\" $i\")\n    psym = PointSymmetryDatabase.get(i)\n    for (elname, matrep) in zip(psym.element_names, psym.matrix_representations)\n        if !haskey(all_elements, elname)\n            all_elements[elname] = []\n        end\n        push!(all_elements[elname], (matrep, psym.hermann_mauguinn))\n    end\nend\nprintln()\n\nprintln(\"elements:\")\nfor (k, v) in all_elements\n    println(\"- element_name: $k\")\n    println(\"  matrix_representations:\")\n    for v2 in v\n        m = [collect(x) for x in eachrow(v2[1])]\n        g = v2[2]\n        println(\"  - { matrix: $(m), group: \\\"$g\\\" }\")\n    end\nend","category":"page"},{"location":"generated/example_point_group_elements/#","page":"Point group elements","title":"Point group elements","text":"","category":"page"},{"location":"generated/example_point_group_elements/#","page":"Point group elements","title":"Point group elements","text":"This page was generated using Literate.jl.","category":"page"}]
}
