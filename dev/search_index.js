var documenterSearchIndex = {"docs":
[{"location":"API/basic/#Basics","page":"Basic","title":"Basics","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"CurrentModule = TightBindingLattice","category":"page"},{"location":"API/basic/#Coordinate-Types","page":"Basic","title":"Coordinate Types","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"CarteCoord\nFractCoord","category":"page"},{"location":"API/basic/#TightBindingLattice.CarteCoord","page":"Basic","title":"TightBindingLattice.CarteCoord","text":"CarteCoord\n\nCartesian coordinates. Vector{Float64}.\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#TightBindingLattice.FractCoord","page":"Basic","title":"TightBindingLattice.FractCoord","text":"FractCoord\n\nFractional coordinates.\n\nFields\n\nwhole::Vector{Int}: Integer part of fractional coordinates\nfraction::Vector{Float64}: [0,1) part of fractional coordinates\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#Functions","page":"Basic","title":"Functions","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"FractCoord(::Vector{Int}, ::Vector{Float64})\nFractCoord(::Vector{Float64})\nFractCoord(::Int)\nfract2carte(::Matrix{Float64}, ::FractCoord)\ncarte2fract(::Matrix{Float64}, ::CarteCoord)","category":"page"},{"location":"API/basic/#TightBindingLattice.FractCoord-Tuple{Array{Int64,1},Array{Float64,1}}","page":"Basic","title":"TightBindingLattice.FractCoord","text":"FractCoord(w, f)\n\nArguments\n\nw::AbstractVector{<:Integer}: whole part of the coordinate\nf::AbstractVector{<:Real}: fractional part. In [0, 1).\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.FractCoord-Tuple{Array{Float64,1}}","page":"Basic","title":"TightBindingLattice.FractCoord","text":"FractCoord(coord)\n\nCreate a FractCoord from coord, where whole is determined by fld(x, 1) and fraction by mod(x, 1).\n\nArguments\n\ncoord::AbstractVector{<:Real}\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.FractCoord-Tuple{Int64}","page":"Basic","title":"TightBindingLattice.FractCoord","text":"FractCoord(ndim)\n\nConstruct a zero FractCoord of ndim dimensions.\n\nArguments\n\nndim::Integer: spatial dimensions\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.fract2carte-Tuple{Array{Float64,2},FractCoord}","page":"Basic","title":"TightBindingLattice.fract2carte","text":"fract2carte(latticevectors, fc)\n\nArguments\n\nlatticevectors::AbstractArray{<:Real, 2}: square matrix whose columns are lattice vectors.\nfc::FractCoord: fractional coordinates\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.carte2fract-Tuple{Array{Float64,2},Array{Float64,1}}","page":"Basic","title":"TightBindingLattice.carte2fract","text":"carte2fract(latticevectors, cc; tol=√ϵ)\n\nArguments\n\nlatticevectors::AbstractArray{<:Real, 2}: square matrix whose columns are lattice vectors.\ncc::CarteCoord: cartesian coordinates\ntol::Real=Base.rtoldefault(Float64): tolerance\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#UnitCell","page":"Basic","title":"UnitCell","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.UnitCell\nTightBindingLattice.makeunitcell","category":"page"},{"location":"API/basic/#TightBindingLattice.UnitCell","page":"Basic","title":"TightBindingLattice.UnitCell","text":"UnitCell{O}\n\nRepresent a unitcell of a lattice, which contains sites at fixed locations (does not yet implement multiple orbitals per site). It is recommended to use makeunitcell rather than the constructor to make a UnitCell object.\n\nParameters\n\nO: type of \"site\". Any type can be used, but we recommend using String or tuple of String and Int for compatibility with JSON.\n\nFields\n\nlatticevectors::Array{Float64, 2}: Lattice vectors\nreducedreciprocallatticevectors::Array{Float64, 2}: Reduced reciprocal lattice vectors  (transpose of inverse of latticevectors)\nreciprocallatticevectors ::Array{Float64, 2}: Reciprocal lattice vectors. 2π * reducedreciprocallatticevectors\nsites::Vector{Tuple{T, FractCoord}}: List of sites within unit cell\nsiteindices::Dict{T, Int}: Indices of sites\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#TightBindingLattice.makeunitcell","page":"Basic","title":"TightBindingLattice.makeunitcell","text":"makeunitcell(latticevectors; SiteType=Any, tol=√ϵ)\n\nConstruct an n-dimensional lattice.\n\nArguments\n\nlatticevectors: Lattice vectors. Can be a nested array of lattice vectors, or a two-dimensional array whose columns are lattice vectors, or a real number.\n\nOptional Arguments\n\nSiteType::DataType\ntol=√ϵ: Epsilon\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#Functions-2","page":"Basic","title":"Functions","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension\nTightBindingLattice.numsite\nTightBindingLattice.sitecount\nTightBindingLattice.addsite!\nTightBindingLattice.hassite\nTightBindingLattice.getsite\nTightBindingLattice.getsiteindex\nTightBindingLattice.getsitecoord\nTightBindingLattice.getsiteindexcoord\nTightBindingLattice.getsitename\nTightBindingLattice.carte2fract(::UnitCell, ::CarteCoord)\nTightBindingLattice.fract2carte(::UnitCell, ::FractCoord)\nTightBindingLattice.whichunitcell\nTightBindingLattice.momentumgrid(::UnitCell, ::Vector{Int})\nTightBindingLattice.findsiteindex","category":"page"},{"location":"API/basic/#TightBindingLattice.dimension","page":"Basic","title":"TightBindingLattice.dimension","text":"dimension(fc::FractCoord)\n\nDimension of the fractional coordinates\n\nArguments\n\nfc::FractCoord: Fractional coordinates.\n\n\n\n\n\ndimension(ortho::OrthoCube)\n\nReturn the spatial dimension of the orthocube.\n\n\n\n\n\ndimension(uc)\n\nSpatial dimension of the unit cell.\n\n\n\n\n\ndimension(lattice)\n\nSpatial dimension of the lattice.\n\nArguments\n\nlattice::Lattice\n\n\n\n\n\ndimension(arg::IdentityOperation)\n\nReturn the spatial dimension of the identity operation.\n\n\n\n\n\ndimension(arg::TranslationOperation)\n\nSpatial dimension of the translation operation\n\n\n\n\n\ndimension(arg::PointOperation)\n\nReturn spatial dimension of arg.\n\n\n\n\n\ndimension(arg::SpaceOperation)\n\nReturn the spatial dimension of arg.\n\n\n\n\n\ndimension(sym::TranslationSymmetry)\n\nSpatial dimension of the translation symmetry\n\n\n\n\n\ndimension(sym::PointSymmetry)\n\nSpatial dimension of the point symmetry\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.numsite","page":"Basic","title":"TightBindingLattice.numsite","text":"numsite(unitcell)\n\nNumber of sites of the unit cell.\n\nArguments\n\nuc ::UnitCell\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.sitecount","page":"Basic","title":"TightBindingLattice.sitecount","text":"sitecount(unitcell)\n\nNumber of sites of the unit cell.\n\nArguments\n\nuc ::UnitCell\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.addsite!","page":"Basic","title":"TightBindingLattice.addsite!","text":"addsite!(unitcell, sitename, sitecoord)\n\nAdd an site to the unit cell.\n\nArguments\n\nuc ::UnitCell{T}\nsitename ::{T}\nsitecoord ::FractCoord\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.hassite","page":"Basic","title":"TightBindingLattice.hassite","text":"hassite(unitcell, name)\n\nTest whether the unit cell contains the site of given name.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsite","page":"Basic","title":"TightBindingLattice.getsite","text":"getsite(unitcell, name)\n\nGet the site (its site name and its fractional coordinates) with the given name.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\nReturn\n\n(sitename, fractcoord)\n\n\n\n\n\ngetsite(unitcell, index)\n\nArguments\n\nunitcell::UnitCell\nindex::Integer\n\nReturn\n\n(sitename, fractcoord)\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsiteindex","page":"Basic","title":"TightBindingLattice.getsiteindex","text":"getsiteindex(unitcell, name)\n\nGet index of the given site.\n\nArguments\n\nunitcell::UnitCell{O}\nname::O\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsitecoord","page":"Basic","title":"TightBindingLattice.getsitecoord","text":"getsitecoord(unitcell, name)\n\nGet the fractional coordinates of the site with the given name.\n\nArguments\n\nuc ::UnitCell{O}\nname ::O\n\nReturn\n\nfractcoord\n\n\n\n\n\ngetsitecoord(unitcell, index)\n\nArguments\n\nunitcell::UnitCell\nindex::Integer\n\nReturn\n\nFractCoord\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsiteindexcoord","page":"Basic","title":"TightBindingLattice.getsiteindexcoord","text":"getsiteindexcoord(unitcell, name)\n\nArguments\n\nunitcell::UnitCell{T}\nname::T\n\nReturn\n\n(index, fractcoord)\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.getsitename","page":"Basic","title":"TightBindingLattice.getsitename","text":"getsitename(unitcell, index)\n\nArguments\n\nuc::UnitCell\nindex::Integer\n\nReturn\n\nsitename\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.carte2fract-Tuple{UnitCell,Array{Float64,1}}","page":"Basic","title":"TightBindingLattice.carte2fract","text":"carte2fract(unitcell, cartecoord; tol=√ϵ)\n\nArguments\n\nunitcell::UnitCell\ncc::CarteCoord\ntol::Real=Base.rtoldefault(Float64)\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.fract2carte-Tuple{UnitCell,FractCoord}","page":"Basic","title":"TightBindingLattice.fract2carte","text":"fract2carte(unitcell, fractcoord)\n\nArguments\n\nunitcell::UnitCell\nfractcoord::FractCoord\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.whichunitcell","page":"Basic","title":"TightBindingLattice.whichunitcell","text":"whichunitcell(unitcell, name, cartecoord; tol=√ϵ)\n\nReturn\n\nVector{Int}: the integer coordinate of the unitcell that the specified site/cartesian coordinate belongs to.\n\n\n\n\n\nwhichunitcell(unitcell, name, fractcoord; tol=√ϵ)\n\nReturn\n\nVector{Int}: the integer coordinate of the unitcell that the specified site/fractional coordinate belongs to.\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#TightBindingLattice.momentumgrid-Tuple{UnitCell,Array{Int64,1}}","page":"Basic","title":"TightBindingLattice.momentumgrid","text":"momentumgrid(unitcell, shape)\n\nGenerate an n-dimensional grid of momenta of given shape.\n\nReturns an n-dimensional array of the following form: math    k[i_1, i_2, \\ldots ] = G \\cdot ( \\frac{i_1}{n_1}, \\frac{i_2}{n_2}, \\ldots )` where G is the reciprocal lattice vector\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.findsiteindex","page":"Basic","title":"TightBindingLattice.findsiteindex","text":"findsiteindex(unitcell::UnitCell, fc::FractCoord; tol=√ϵ)\n\nFind the index of the site, and the unitcell coordinate at the specified fractional coordinate.\n\nArguments\n\nunitcell::UnitCell\nfc::FractCoord\n\nReturns\n\n(site_index, unitcell_vector), or (-1, []) if not found.\n\n\n\n\n\n","category":"function"},{"location":"API/basic/#OrthoCube","page":"Basic","title":"OrthoCube","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.OrthoCube","category":"page"},{"location":"API/basic/#TightBindingLattice.OrthoCube","page":"Basic","title":"TightBindingLattice.OrthoCube","text":"OrthoCube(shape)\n\nRepresent a hypercubic (Bravais) lattice.\n\nFields\n\nshape_matrix: a matrix whose columns are the lattice vectors of the\ninverse_shape_matrix: (shape_matrix)\nwrap: periodic wrapping function which takes an integer array, and maps it onto a site in the Bravais lattice. Analogous to fldmod.\n\n\n\n\n\n","category":"type"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension(::OrthoCube)\nTightBindingLattice.volume(::OrthoCube)\nTightBindingLattice.isequiv(::OrthoCube, ::OrthoCube)\nTightBindingLattice.find_generators(::OrthoCube)\nTightBindingLattice.find_generators_2d(::OrthoCube)\nTightBindingLattice.generate_coordinates(::OrthoCube, ::Matrix{Int})","category":"page"},{"location":"API/basic/#TightBindingLattice.dimension-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.dimension","text":"dimension(ortho::OrthoCube)\n\nReturn the spatial dimension of the orthocube.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.volume-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.volume","text":"volume(ortho::OrthoCube)\n\nReturn the signed volume of the orthocube, defined by the determinant of the shape.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.isequiv-Tuple{OrthoCube,OrthoCube}","page":"Basic","title":"TightBindingLattice.isequiv","text":"isequiv(lhs::OrthoCube, rhs::OrthoCube)\n\nCheck whether the two orthocubes are equivalent.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.find_generators-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.find_generators","text":"find_generators(ortho::OrthoCube)\n\nFind generators of an OrthoCube. For one-dimensional lattice, which is isomorphic to Zₙ, the generator is +1. For two-dimensional lattices, this function invokes find_generators_2d. Higher dimensions are currently not supported.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.find_generators_2d-Tuple{OrthoCube}","page":"Basic","title":"TightBindingLattice.find_generators_2d","text":"find_generators_2d(ortho::OrthoCube)\n\nFind translation generators of an OrthoCube.\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#TightBindingLattice.generate_coordinates-Tuple{OrthoCube,Array{Int64,2}}","page":"Basic","title":"TightBindingLattice.generate_coordinates","text":"generate_coordinates(ortho, generators)\n\nGenerate a list of coordinates of the orthocube\n\nArguments\n\northo::OrthoCube\ngenerator_translations::AbstractMatrix{<:Integer}\n\n\n\n\n\n","category":"method"},{"location":"API/basic/#Lattice","page":"Basic","title":"Lattice","text":"","category":"section"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.Lattice\nTightBindingLattice.makelattice","category":"page"},{"location":"API/basic/#TightBindingLattice.Lattice","page":"Basic","title":"TightBindingLattice.Lattice","text":"Lattice{O}\n\nRepresent a lattice.\n\nArguments\n\nunitcell::UnitCell{O}\northocube::OrthoCube\nbravais_coordinates::Vector{Vector{Int}}\nsupercell::UnitCell{Tuple{O, Vector{Int}}}\n\n\n\n\n\n","category":"type"},{"location":"API/basic/#TightBindingLattice.makelattice","page":"Basic","title":"TightBindingLattice.makelattice","text":"makelattice(unitcell, shape, [generators])\n\nCreate a lattice with periodic boundary condition, using the unitcell, shape, and translation generators.\n\nArguments\n\nunitcell::UnitCell{O}\nshape_matrix::AbstractMatrix{<:Integer}: shape of the Bravais lattice. This can also be\n\na single integer, which is equivalent to a identity matrix times the number.\n\nOptional Arguments\n\ngenerator_translations::AbstractMatrix{<:Integer}\n\n\n\n\n\n","category":"function"},{"location":"API/basic/","page":"Basic","title":"Basic","text":"TightBindingLattice.dimension(::Lattice)","category":"page"},{"location":"API/basic/#TightBindingLattice.dimension-Tuple{Lattice}","page":"Basic","title":"TightBindingLattice.dimension","text":"dimension(lattice)\n\nSpatial dimension of the lattice.\n\nArguments\n\nlattice::Lattice\n\n\n\n\n\n","category":"method"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_symmetry_kspace_honeycomb.jl\"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Honeycomb-Lattice-in-k-space","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"using LinearAlgebra\nusing Plots\nusing TightBindingLattice\n\nsimplifyname(s::AbstractString) = (\n    s\n    |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n    |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n)\n\nfunction makewithin(extent::AbstractVector{<:Real})\n    a, b, c, d = extent\n    (x::Real, y::Real) -> ((a <= x <= b) && (c <= y <= d))\nend\nmkpath(\"example_little_symmetry_kspace_honeycomb\")","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Honeycome-Lattice","page":"Honeycomb Lattice in k-space","title":"Honeycome Lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Define-UnitCell","page":"Honeycomb Lattice in k-space","title":"Define UnitCell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"latticevectors = [1 -0.5; 0 sqrt(3)*0.5];\nunitcell = makeunitcell(latticevectors; SiteType=String);\naddsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5 / sqrt(3)]));\naddsite!(unitcell, \"B\", carte2fract(unitcell, [0.5, -0.5 / sqrt(3)]));\nnothing #hide","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Lattice","page":"Honeycomb Lattice in k-space","title":"Plot Lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-2, 2, -2, 2]\n    within = makewithin(extent)\n    for i1 in -5:5, i2 in -5:5\n        R = latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in unitcell.sites\n            orb_cc = fract2carte(unitcell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-3-Supercell","page":"Honeycomb Lattice in k-space","title":"√3 × √3 Supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice","page":"Honeycomb Lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"shape = [2 -1; 1 1]\nlattice = makelattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Lattice-2","page":"Honeycomb Lattice in k-space","title":"Plot Lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-4, 4, -4, 4]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=3, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=5, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=5, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries","page":"Honeycomb Lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Momentum-Space","page":"Honeycomb Lattice in k-space","title":"Plot Momentum Space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(400, 500), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-root3xroot3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#3-23-Supercell","page":"Honeycomb Lattice in k-space","title":"2√3 × 2√3 Supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-2","page":"Honeycomb Lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"shape = [2 2; -2 4]\nlattice = makelattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Lattice-3","page":"Honeycomb Lattice in k-space","title":"Plot Lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-2","page":"Honeycomb Lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Momentum-Space-2","page":"Honeycomb Lattice in k-space","title":"Plot Momentum Space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(600, 750), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-2root3x2root3.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#6-Supercell","page":"Honeycomb Lattice in k-space","title":"6 × 6 Supercell","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Make-Superlattice-3","page":"Honeycomb Lattice in k-space","title":"Make Superlattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"shape = [6 0; 0 6]\nlattice = makelattice(unitcell, shape)","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Lattice-4","page":"Honeycomb Lattice in k-space","title":"Plot Lattice","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let bravais_lattice = [], a_sites = [], b_sites = []\n    extent = [-8, 8, -8, 8]\n    within = makewithin(extent)\n\n    for i1 in -5:5, i2 in -5:5\n        R = lattice.supercell.latticevectors * [i1, i2]\n        within(R...) && push!(bravais_lattice, R)\n        for (orb_name, orb_fc) in lattice.supercell.sites\n            orb_cc = fract2carte(lattice.supercell, orb_fc)\n            r = R + orb_cc\n            within(r...) && push!(orb_name[1] == \"A\" ? a_sites : b_sites, r)\n        end\n    end\n    bravais_lattice = hcat(bravais_lattice...)\n    a_sites = hcat(a_sites...)\n    b_sites = hcat(b_sites...)\n\n    img = plot(aspect_ratio=1)\n    scatter!(bravais_lattice[1,:], bravais_lattice[2,:], color=\"black\", markershape=:circle, markersize=5, label=\"Bravais (supercell)\")\n    scatter!(a_sites[1,:], a_sites[2,:], color=\"red\", markerstrokewidth=0, markersize=3, label=\"A\")\n    scatter!(b_sites[1,:], b_sites[2,:], color=\"blue\", markerstrokewidth=0, markersize=3, label=\"B\")\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/realspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Symmetries-3","page":"Honeycomb Lattice in k-space","title":"Symmetries","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"tsym = TranslationSymmetry(lattice)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\nprintln(\"point symmetry (Hermann Mauguin): $(psym.hermann_mauguin)\")\nprintln(\"translation symmetry compatible with point symmetry? \", iscompatible(tsym, psym))\n\nprintln(\"irreducible representations:\")\nfor tsym_irrep_index in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[tsym_irrep_index]\n    kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n    print(\"- irrep index: $tsym_irrep_index\\n\")\n    print(\"  fractional momentum: [\")\n    for (i, x) in enumerate(kf)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  momentum: [\")\n    for (i, x) in enumerate(kc)\n        i != 1 && print(\", \")\n        print(x)\n    end\n    print(\"]\\n\")\n    print(\"  is point symmetry compatible with momentum: $(iscompatible(tsym, tsym_irrep_index, psym))\\n\")\n    print(\"  little point symmetry: $(psym_little.hermann_mauguin)\\n\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/#Plot-Momentum-Space-3","page":"Honeycomb Lattice in k-space","title":"Plot Momentum Space","text":"","category":"section"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"let\n    extent = [-1.2, 1.2, -1.6, 1.6]\n    extent = [-1.1, 1.1, -1.4, 1.4]\n    within = makewithin(extent)\n\n    reciprocallatticepoints = []\n    kpoints = []\n    littlegroupnames = String[]\n    generatornames = String[]\n    kpointnames = String[]\n\n    for tsym_irrep_index in 1:num_irreps(tsym)\n        psym_little = little_symmetry(tsym, tsym_irrep_index, psym)\n        kf = tsym.fractional_momenta[tsym_irrep_index]\n        kc = lattice.unitcell.reducedreciprocallatticevectors * kf\n        for i1 in -2:2, i2 in -2:2\n            G = lattice.unitcell.reducedreciprocallatticevectors * [i1, i2]\n            within(G...) && push!(reciprocallatticepoints, G)\n            k = G + kc\n            if within(k...)\n                push!(kpoints, k)\n                push!(littlegroupnames, psym_little.hermann_mauguin)\n                push!(generatornames, join(simplifyname.(psym_little.element_names[psym_little.generators]), \"\\n\"))\n                push!(kpointnames, \"$tsym_irrep_index\")\n            end\n        end\n    end\n    reciprocallatticepoints = hcat(reciprocallatticepoints...)\n    kpoints = hcat(kpoints...)\n\n    img = plot(size=(800, 1000), xlims=(extent[1]-0.1, extent[2]+0.1), ylims=(extent[3]-0.1, extent[4]+0.1), aspect_ratio=1)\n    scatter!(reciprocallatticepoints[1,:], reciprocallatticepoints[2,:],\n             markershape=:circle, markersize=6, markercolor=RGBA(1,1,1,0), markerstrokecolor=RGBA(1,0,0,1), label=\"reciprocal lattice\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=4, markercolor=RGBA(0,0,1,0.5), markerstrokecolor=RGBA(0,0,1,0.5),\n             series_annotations=[Plots.text(\"k[$x]\", 8, :left, :bottom) for x in kpointnames], label=\"momentum points\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x \", 8, :right, :top) for x in littlegroupnames], label=\"\")\n    scatter!(kpoints[1,:], kpoints[2,:],\n             markershape=:circle, markersize=0, color=RGBA(0,0,0,0),\n             series_annotations=[Plots.text(\"$x\", 6, :left, :top) for x in generatornames], label=\"\")\n    savefig(img, \"example_little_symmetry_kspace_honeycomb/momentumspace-6x6.svg\")\nend","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"(Image: )","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"","category":"page"},{"location":"generated/example_little_symmetry_kspace_honeycomb/","page":"Honeycomb Lattice in k-space","title":"Honeycomb Lattice in k-space","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_kagome_symmetry.jl\"","category":"page"},{"location":"generated/example_kagome_symmetry/#Kagome-Lattice","page":"Kagome Lattice","title":"Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/#Preamble","page":"Kagome Lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Printf\nusing Plots\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_kagome_symmetry\")\nextent = [-2, 2, -2, 2]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4])","category":"page"},{"location":"generated/example_kagome_symmetry/#Generate-Kagome-Lattice","page":"Kagome Lattice","title":"Generate Kagome Lattice","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"function make_kagome_lattice(size_matrix ::AbstractMatrix{<:Integer})\n    latticevectors = [1 -0.5; 0 0.5*sqrt(3.0)];\n    unitcell = makeunitcell(latticevectors, SiteType=String)\n    addsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.0]))\n    addsite!(unitcell, \"B\", carte2fract(unitcell, [0.25, 0.25*sqrt(3.0)]))\n    addsite!(unitcell, \"C\", carte2fract(unitcell, [0.5+0.25, 0.25*sqrt(3.0)]))\n\n    nnbondtypes = [\n        ([ 0, 0], \"A\", [ 0, 0], \"B\", 1),\n        ([ 0, 0], \"A\", [ 0, 0], \"C\", 1),\n        ([ 0, 0], \"B\", [ 0, 0], \"C\", 1),\n        ([ 1, 1], \"A\", [ 1, 0], \"B\",-1),\n        ([ 1, 0], \"B\", [ 0, 0], \"C\",-1),\n        ([ 0, 0], \"C\", [ 1, 1], \"A\",-1),\n    ]\n\n    nnnbondtypes = [\n        ([ 0, 0], \"A\", [ 1, 0], \"B\", 1), # ◁\n        ([ 1, 0], \"B\", [ 0,-1], \"C\", 1),\n        ([ 0,-1], \"C\", [ 0, 0], \"A\", 1),\n        ([ 0, 0], \"C\", [ 1, 0], \"A\",-1),\n        ([ 1, 0], \"A\", [ 0,-1], \"B\",-1), # ▷\n        ([ 0,-1], \"B\", [ 0, 0], \"C\",-1),\n    ]\n\n    lattice = makelattice(unitcell, size_matrix)\n    orthocube = lattice.orthocube\n    supercell = lattice.supercell\n    tsym = TranslationSymmetry(lattice)\n    psym = little_symmetry(tsym, project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0]))\n    tsymbed = embed(lattice, tsym)\n    psymbed = embed(lattice, psym)\n    ssymbed = tsymbed ⋊ psymbed\n\n    nnbonds = []\n    nnnbonds = []\n\n    for r in lattice.bravais_coordinates\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.siteindices, roworb_super, -1)\n            icol = get(supercell.siteindices, colorb_super, -1)\n            push!(nnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n        for (rowvec, roworb, colvec, colorb, bondsign) in nnnbondtypes\n            R_row, r_row = orthocube.wrap(r .+ rowvec)\n            R_col, r_col = orthocube.wrap(r .+ colvec)\n            roworb_super = (roworb, r_row)\n            colorb_super = (colorb, r_col)\n            irow = get(supercell.siteindices, roworb_super, -1)\n            icol = get(supercell.siteindices, colorb_super, -1)\n            push!(nnnbonds, ((irow, icol), R_col-R_row, bondsign))\n        end\n    end\n\n    nn_triangles = []\n    for r in lattice.bravais_coordinates\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[1:3]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.siteindices, roworb_super, -1)\n        icol = get(supercell.siteindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, 1))\n\n      triangle = []\n      for (rowvec, roworb, colvec, colorb, bondsign) in nnbondtypes[4:6]\n        R_row, r_row = orthocube.wrap(r .+ rowvec)\n        R_col, r_col = orthocube.wrap(r .+ colvec)\n        roworb_super = (roworb, r_row)\n        colorb_super = (colorb, r_col)\n        irow = get(supercell.siteindices, roworb_super, -1)\n        icol = get(supercell.siteindices, colorb_super, -1)\n        push!(triangle, ((irow, icol), R_col-R_row))\n      end\n      push!(nn_triangles, (triangle, -1))\n    end\n\n    return (unitcell=unitcell,\n            lattice=lattice,\n            space_symmetry_embedding=ssymbed,\n            nearest_neighbor_bonds=nnbonds,\n            next_nearest_neighbor_bonds=nnnbonds,\n            nearest_neighbor_triangles=nn_triangles)\nend","category":"page"},{"location":"generated/example_kagome_symmetry/#Symmetry-Analysis","page":"Kagome Lattice","title":"Symmetry Analysis","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"kagome = make_kagome_lattice([4 -2; 2 2])\n\ntsymbed = kagome.space_symmetry_embedding.normal\npsymbed = kagome.space_symmetry_embedding.rest\ntsym = symmetry(tsymbed)\npsym = symmetry(psymbed)\n\nprintln(\"Point Symmetry\")\nprintln(\"==============\")\nprintln()\nprintln(\"Point group: \", psym.hermann_mauguin)\nprintln(\"Number of elements: \", group_order(psym))\nprintln(\"Number of irreps: \", num_irreps(psym))","category":"page"},{"location":"generated/example_kagome_symmetry/#Site-Map","page":"Kagome Lattice","title":"Site Map","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"site_map = findsitemap(kagome.lattice.unitcell, psym)\n\nprintln(\"Site map\")\nprintln(\"-----------\")\nprintln()\n\nfor (n, map) in zip(element_names(psym), site_map)\n    @printf(\"%32s:\", n)\n    for (i_elem, (j_elem, R)) in enumerate(map)\n        @printf(\"  %d ↦ %d, %-8s\", i_elem, j_elem, string(R))\n    end\n    println()\nend\nprintln()","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Translation-Symmetry","page":"Kagome Lattice","title":"Plot Translation Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.sites)\n        orbfc = getsitecoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/#Plot-Point-Symmetry","page":"Kagome Lattice","title":"Plot Point Symmetry","text":"","category":"section"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 200), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(kagome.lattice.supercell.sites)\n        orbfc = getsitecoord(kagome.lattice.supercell, perm(iorb))\n        orbcc = fract2carte(kagome.lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = kagome.lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(orbcoords[1,idx_filt] .+ LR[1],\n                 orbcoords[2,idx_filt] .+ LR[2],\n                 color=\"blue\",\n                 markerstrokecolor=\"blue\",\n                 series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]], label=nothing)\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_kagome_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"","category":"page"},{"location":"generated/example_kagome_symmetry/","page":"Kagome Lattice","title":"Kagome Lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point Group Elements","title":"Point Group Elements","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_elements.jl\"","category":"page"},{"location":"generated/example_point_group_elements/#Point-Group-Elements","page":"Point Group Elements","title":"Point Group Elements","text":"","category":"section"},{"location":"generated/example_point_group_elements/","page":"Point Group Elements","title":"Point Group Elements","text":"Search elements by their Seitz name, and show their matrix representations","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point Group Elements","title":"Point Group Elements","text":"using TightBindingLattice\n\nall_elements = Dict()\nprint(\"# Reading groups\")\nfor i in 1:32\n    print(\" $i\")\n    psym = PointSymmetryDatabase.get(i)\n    for (elname, matrep) in zip(psym.element_names, psym.matrix_representations)\n        if !haskey(all_elements, elname)\n            all_elements[elname] = []\n        end\n        push!(all_elements[elname], (matrep, psym.hermann_mauguin))\n    end\nend\nprintln()\n\nprintln(\"elements:\")\nfor (k, v) in all_elements\n    println(\"- element_name: $k\")\n    println(\"  matrix_representations:\")\n    for v2 in v\n        m = [collect(x) for x in eachrow(v2[1])]\n        g = v2[2]\n        println(\"  - { matrix: $(m), group: \\\"$g\\\" }\")\n    end\nend","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point Group Elements","title":"Point Group Elements","text":"","category":"page"},{"location":"generated/example_point_group_elements/","page":"Point Group Elements","title":"Point Group Elements","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/symmetry-irrep-component/#Symmetry-Irrep-Components","page":"Symmetry Irrep Component","title":"Symmetry Irrep Components","text":"","category":"section"},{"location":"API/symmetry-irrep-component/#IrrepComponent","page":"Symmetry Irrep Component","title":"IrrepComponent","text":"","category":"section"},{"location":"API/symmetry-irrep-component/","page":"Symmetry Irrep Component","title":"Symmetry Irrep Component","text":"IrrepComponent","category":"page"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.IrrepComponent","page":"Symmetry Irrep Component","title":"TightBindingLattice.IrrepComponent","text":"IrrepComponent{SymmetryType}\n\nRepresent an irrep component. Consider a symmetry S, and  the i'th irrep Γᵢ, which has D dimensions. The d-dimensional component (1 ≤ d ≤ D) is represented by Irrep(S, i, D). This type serves as a subscript for iterating over all components of all irreps.\n\nParameters\n\nSymmetryType<:SymmetryOrEmbedding\n\nFields\n\nsymmetry::SymmetryType\nirrep_index::Int\nirrep_component::Int\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-irrep-component/","page":"Symmetry Irrep Component","title":"Symmetry Irrep Component","text":"group_order(::IrrepComponent)\nget_irrep_components(::AbstractSymmetry)\nget_irrep_iterator(::IrrepComponent)","category":"page"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.group_order-Tuple{IrrepComponent}","page":"Symmetry Irrep Component","title":"TightBindingLattice.group_order","text":"group_order(sic::IrrepComponent)\n\nGet order of the symmetry group of sic.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.get_irrep_components-Tuple{AbstractSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmetryOrEmbedding)\n\nReturn a generator which gives IrrepComponent(sym, irrep_index, irrep_component).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.get_irrep_iterator-Tuple{IrrepComponent}","page":"Symmetry Irrep Component","title":"TightBindingLattice.get_irrep_iterator","text":"get_irrep_iterator(sic::IrrepComponent)\n\nReturn a generator which gives (element, amplitude), where amplitude is the irrep component of element.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#Little-Group","page":"Symmetry Irrep Component","title":"Little Group","text":"","category":"section"},{"location":"API/symmetry-irrep-component/","page":"Symmetry Irrep Component","title":"Symmetry Irrep Component","text":"little_group_elements(::IrrepComponent{TranslationSymmetry}, ::PointSymmetry)\nlittle_group(::IrrepComponent{TranslationSymmetry}, ::PointSymmetry)\nlittle_group(::IrrepComponent{SymmetryEmbedding{TranslationSymmetry}}, ::SymmetryEmbedding{PointSymmetry})\nlittle_symmetry(::IrrepComponent{TranslationSymmetry}, ::PointSymmetry)\niscompatible(::IrrepComponent{TranslationSymmetry}, ::PointSymmetry)","category":"page"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.little_group_elements-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsic, psym)\n\nReturn little group elements (i.e. indices) of psym corresponding to the irrep of translation symmetry specified by tsic. tsic and psym are either\n\nIrrepComponent{TranslationSymmetry} and PointSymmetry, or\nIrrepComponent{SymmetryEmbedding{TranslationSymmetry}} and SymmetryEmbedding{PointSymmetry}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.little_group-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.little_group","text":"little_group(tsic, psym)\n\nReturn the FiniteGroup object that corresponds to the little group of psym at tsic.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.little_group-Tuple{IrrepComponent{SymmetryEmbedding{TranslationSymmetry}},SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Irrep Component","title":"TightBindingLattice.little_group","text":"little_group(tsic, psymbed)\n\nReturn the FiniteGroup object that corresponds to the little group of psymbed at tsic.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.little_symmetry-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsic, psym)\n\nReturn the PointSymmetry object that corresponds to the little group of psym at tsic.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.iscompatible-Tuple{IrrepComponent{TranslationSymmetry},PointSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsic, psym)\n\nTest whether the point symmetry psym is compatible with the irrep component tsic (i.e. momentum) of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#SymmorphicIrrepComponent","page":"Symmetry Irrep Component","title":"SymmorphicIrrepComponent","text":"","category":"section"},{"location":"API/symmetry-irrep-component/","page":"Symmetry Irrep Component","title":"Symmetry Irrep Component","text":"SymmorphicIrrepComponent","category":"page"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.SymmorphicIrrepComponent","page":"Symmetry Irrep Component","title":"TightBindingLattice.SymmorphicIrrepComponent","text":"SymmorphicIrrepComponent{S1<:SymmetryOrEmbedding, S2<:SymmetryOrEmbedding}\n\nIrrep component of a symmorphic symmetry (embedding).\n\nFields\n\nnormal::IrrepComponent{S1}\nrest::IrrepComponent{S2}\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-irrep-component/","page":"Symmetry Irrep Component","title":"Symmetry Irrep Component","text":"group_order(::SymmorphicIrrepComponent)\nget_irrep_components(::SymmorphicSymmetry)\nget_irrep_components(::SymmorphicSymmetryEmbedding)\nget_irrep_iterator(::SymmorphicIrrepComponent)","category":"page"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.group_order-Tuple{SymmorphicIrrepComponent}","page":"Symmetry Irrep Component","title":"TightBindingLattice.group_order","text":"group_order(arg::SymmorphicIrrepComponent)\n\nGroup order of the underlying symmorphic group of arg.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.get_irrep_components-Tuple{SymmorphicSymmetry}","page":"Symmetry Irrep Component","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmorphicSymmetry)\n\nReturn an iterator which iterates over the irrep component of the symmorphic symmetry sym.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.get_irrep_components-Tuple{SymmorphicSymmetryEmbedding}","page":"Symmetry Irrep Component","title":"TightBindingLattice.get_irrep_components","text":"get_irrep_components(sym::SymmorphicSymmetryEmbedding)\n\nReturn an iterator which iterates over the irrep component of the symmorphic symmetry embedding sym.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-irrep-component/#TightBindingLattice.get_irrep_iterator-Tuple{SymmorphicIrrepComponent}","page":"Symmetry Irrep Component","title":"TightBindingLattice.get_irrep_iterator","text":"get_irrep_iterator(ssic::SymmorphicIrrepComponent)\n\nReturn an iterator which iterates over the elements, together with their corresponding irrep coefficient of the given irrep component.\n\nReturn\n\n[(r⋅n, cᵣ⋅cₙ) for all r for all n]\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#Symmetry-Embedding","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"","category":"section"},{"location":"API/symmetry-embedding/#SitePermutation","page":"Symmetry Embedding","title":"SitePermutation","text":"","category":"section"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"SitePermutation","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.SitePermutation","page":"Symmetry Embedding","title":"TightBindingLattice.SitePermutation","text":"SitePermutation\n\nRepresents a permutation of sites as a symmetry operation of a lattice.\n\nFields\n\npermutation::Permutation\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"embed(::Lattice, ::TranslationOperation{Int})\nembed(::Lattice, ::PointOperation{Int})\nembed(::Lattice, ::SpaceOperation{Int, Int})\nisidentity(::SitePermutation)","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.embed-Tuple{Lattice,TranslationOperation{Int64}}","page":"Symmetry Embedding","title":"TightBindingLattice.embed","text":"embed(lattice, translation_operation)\n\nEmbed the simplest version of integer translation (no mapping between sites etc.)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.embed-Tuple{Lattice,PointOperation{Int64}}","page":"Symmetry Embedding","title":"TightBindingLattice.embed","text":"embed(lattice, point_operation)\n\nEmbed the simplest version of point operation. (no local unitary operation)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.embed-Tuple{Lattice,SpaceOperation{Int64,Int64}}","page":"Symmetry Embedding","title":"TightBindingLattice.embed","text":"embed(lattice, sop::SpaceOperation{<:Integer, <:Integer})\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.isidentity-Tuple{SitePermutation}","page":"Symmetry Embedding","title":"TightBindingLattice.isidentity","text":"isidentity(perm::SitePermutation)\n\nTest whether perm is an identity.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#SymmetryEmbedding","page":"Symmetry Embedding","title":"SymmetryEmbedding","text":"","category":"section"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"SymmetryEmbedding","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.SymmetryEmbedding","page":"Symmetry Embedding","title":"TightBindingLattice.SymmetryEmbedding","text":"SymmetryEmbedding{SymmetryType<:AbstractSymmetry}\n\nFields\n\nlattice::Lattice\nsymmetry::SymmetryType\nelements::Vector{SitePermutation}\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"elements(::SymmetryEmbedding)\nelement(::SymmetryEmbedding)\nsymmetry(::SymmetryEmbedding)\ngenerator_elements(::SymmetryEmbedding)","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.elements-Tuple{SymmetryEmbedding}","page":"Symmetry Embedding","title":"TightBindingLattice.elements","text":"elements(symbed::SymmetryEmbedding)\n\nGet elements of the symmetry embedding\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.element-Tuple{SymmetryEmbedding}","page":"Symmetry Embedding","title":"TightBindingLattice.element","text":"element(symbed::SymmetryEmbedding, g...)\n\nGet the gth element of the symmetry embedding.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.symmetry-Tuple{SymmetryEmbedding}","page":"Symmetry Embedding","title":"TightBindingLattice.symmetry","text":"symmetry(symbed::SymmetryEmbedding)\n\nReturn the underlying symmetry of the symmetry embedding\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.generator_elements-Tuple{SymmetryEmbedding}","page":"Symmetry Embedding","title":"TightBindingLattice.generator_elements","text":"generator_elements(symbed::SymmetryEmbedding)\n\nGet the generators of the symmetry embedding, based on the generators of the underlying symmetry. The embedding is allowed to be one-to-one, in which case the return value may contain duplicates.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"group_order(::SymmetryEmbedding, ::Any)\ngroup_multiplication_table(::SymmetryEmbedding, ::Any)\ngenerator_indices(::SymmetryEmbedding, ::Any)\nelement_names(::SymmetryEmbedding, ::Any)\nelement_name(::SymmetryEmbedding, ::Any)\ncharacter_table(::SymmetryEmbedding, ::Any)\nirreps(::SymmetryEmbedding, ::Any)\nirrep(::SymmetryEmbedding, ::Any)\nirrep_dimension(::SymmetryEmbedding, ::Any)\nnum_irreps(::SymmetryEmbedding, ::Any)\nnumirreps(::SymmetryEmbedding, ::Any)\nirrepcount(::SymmetryEmbedding, ::Any)","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.group_order-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.group_order","text":"group_order(::SymmetryEmbedding, args...)\n\nCalls group_order for the underlying symmetry. See group_order(::TranslationSymmetry), group_order(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.group_multiplication_table-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(::SymmetryEmbedding, args...)\n\nCalls group_multiplication_table for the underlying symmetry. See group_multiplication_table(::TranslationSymmetry), group_multiplication_table(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.generator_indices-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.generator_indices","text":"generator_indices(::SymmetryEmbedding, args...)\n\nCalls generator_indices for the underlying symmetry. See generator_indices(::TranslationSymmetry), generator_indices(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.element_names-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.element_names","text":"element_names(::SymmetryEmbedding, args...)\n\nCalls element_names for the underlying symmetry. See element_names(::TranslationSymmetry), element_names(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.element_name-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.element_name","text":"element_name(::SymmetryEmbedding, args...)\n\nCalls element_name for the underlying symmetry. See element_name(::TranslationSymmetry), element_name(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.character_table-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.character_table","text":"character_table(::SymmetryEmbedding, args...)\n\nCalls character_table for the underlying symmetry. See character_table(::TranslationSymmetry), character_table(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.irreps-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.irreps","text":"irreps(::SymmetryEmbedding, args...)\n\nCalls irreps for the underlying symmetry. See irreps(::TranslationSymmetry), irreps(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.irrep-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.irrep","text":"irrep(::SymmetryEmbedding, args...)\n\nCalls irrep for the underlying symmetry. See irrep(::TranslationSymmetry), irrep(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.irrep_dimension-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.irrep_dimension","text":"irrep_dimension(::SymmetryEmbedding, args...)\n\nCalls irrep_dimension for the underlying symmetry. See irrep_dimension(::TranslationSymmetry), irrep_dimension(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.num_irreps-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.num_irreps","text":"num_irreps(::SymmetryEmbedding, args...)\n\nCalls num_irreps for the underlying symmetry. See num_irreps(::TranslationSymmetry), num_irreps(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.numirreps-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.numirreps","text":"numirreps(::SymmetryEmbedding, args...)\n\nCalls numirreps for the underlying symmetry. See numirreps(::TranslationSymmetry), numirreps(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.irrepcount-Tuple{SymmetryEmbedding,Any}","page":"Symmetry Embedding","title":"TightBindingLattice.irrepcount","text":"irrepcount(::SymmetryEmbedding, args...)\n\nCalls irrepcount for the underlying symmetry. See irrepcount(::TranslationSymmetry), irrepcount(::PointSymmetry).\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"fractional_momentum(::SymmetryEmbedding{TranslationSymmetry})\niscompatible(::SymmetryEmbedding{TranslationSymmetry}, ::SymmetryEmbedding{PointSymmetry})\niscompatible(::SymmetryEmbedding{TranslationSymmetry}, ::Int, ::SymmetryEmbedding{PointSymmetry})\nlittle_group_elements(::SymmetryEmbedding{TranslationSymmetry}, ::SymmetryEmbedding{PointSymmetry})\nlittle_group_elements(::SymmetryEmbedding{TranslationSymmetry}, ::Int, ::SymmetryEmbedding{PointSymmetry})\nlittle_symmetry(::SymmetryEmbedding{TranslationSymmetry}, ::SymmetryEmbedding{PointSymmetry})\nlittle_symmetry(::SymmetryEmbedding{TranslationSymmetry}, ::Int, ::SymmetryEmbedding{PointSymmetry})\nsymmetry_name(::SymmetryEmbedding)","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.fractional_momentum-Tuple{SymmetryEmbedding{TranslationSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.fractional_momentum","text":"fractional_momentum(symbed::SymmetryEmbedding{TranslationSymmetry}, args...)\n\nReturn fractional momentum(s) of the translation symmetry embedding.\n\n\n\n\n\nfractional_momentum(sym, g)\n\nReturn the gth fractional momentum of the normal (translation) symmetry.\n\nArguments\n\nsym::SymmorphicSymmetry{<:TranslationSymmetry, S2, E}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.iscompatible-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsymbed, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry embedding tsymbed, i.e. whether they have the same \"lattice\".\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.iscompatible-Tuple{SymmetryEmbedding{TranslationSymmetry},Int64,SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.iscompatible","text":"iscompatible(tsymbed, tsym_irrep_index, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry irrep defined by tsym_irrep_index and symmetry(tsymbed). In other words, the little group elements\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.little_group_elements-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsymbed, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.little_group_elements-Tuple{SymmetryEmbedding{TranslationSymmetry},Int64,SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.little_symmetry-Tuple{SymmetryEmbedding{TranslationSymmetry},SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsymbed, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.little_symmetry-Tuple{SymmetryEmbedding{TranslationSymmetry},Int64,SymmetryEmbedding{PointSymmetry}}","page":"Symmetry Embedding","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.symmetry_name-Tuple{SymmetryEmbedding}","page":"Symmetry Embedding","title":"TightBindingLattice.symmetry_name","text":"symmetry_name(arg::SymmetryEmbedding)\n\nReturn the name of the symmetry embedding.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#Embedding-a-Symmetry-onto-a-Lattice","page":"Symmetry Embedding","title":"Embedding a Symmetry onto a Lattice","text":"","category":"section"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"embed(::Lattice, ::TranslationSymmetry) \nembed(::Lattice, ::PointSymmetry)\ntranslation_symmetry_embedding(::Lattice)","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.embed-Tuple{Lattice,TranslationSymmetry}","page":"Symmetry Embedding","title":"TightBindingLattice.embed","text":"embed(lattice::Lattice, tsym::TranslationSymmetry)\n\nEmbed translation symmetry tsym to lattice.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.embed-Tuple{Lattice,PointSymmetry}","page":"Symmetry Embedding","title":"TightBindingLattice.embed","text":"embed(lattice::Lattice, psym::PointSymmetry)\n\nEmbed point symmetry psym to lattice.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#TightBindingLattice.translation_symmetry_embedding-Tuple{Lattice}","page":"Symmetry Embedding","title":"TightBindingLattice.translation_symmetry_embedding","text":"translation_symmetry_embedding(lattice::Lattice)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-embedding/#findsitemap","page":"Symmetry Embedding","title":"findsitemap","text":"","category":"section"},{"location":"API/symmetry-embedding/","page":"Symmetry Embedding","title":"Symmetry Embedding","text":"findsitemap","category":"page"},{"location":"API/symmetry-embedding/#TightBindingLattice.findsitemap","page":"Symmetry Embedding","title":"TightBindingLattice.findsitemap","text":"findsitemap(unitcell, translation_operation)\n\nFind which site gets mapped to which site with what lattice displacement. Return a vector of tuples (j, Rj) at index i, representing that the site i gets mapped to site j with lattice displacement Rj.\n\nSince periodic boundary condition is always assumed, the return value always exists.\n\nThis function is used to find the mapping between sites under translation symmetry in a given lattice. The overall transformation will be a combiation of (1) the result here, and (2) Bravais lattice transformation. Since all the integer translations will be taken care of by the Bravais lattice transformation, Rj here is all zero vectors.\n\n\n\n\n\nfindsitemap(unitcell, translation_symmetry)\n\nFind the sitemap for every element of the translation symmetry. Return [findsitemap(unitcell, m) for m in elements(translation_symmetry)].\n\n\n\n\n\nfindsitemap(unitcell, point_operation)\n\nFind which site gets mapped to which site with what lattice displacement. Return a vector of tuples (j, Rj) at index i, representing that the site i gets mapped to site j with lattice displacement Rj. If the unit cell is not compatible with the point operation, return nothing.\n\n\n\n\n\nfindsitemap(unitcell, point_symmetry)\n\nFind the sitemap for every element of the point symmetry. Return nothing if the unit cell is incompatible with any element of the point symmetry.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#Symmetry","page":"Symmetry","title":"Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"CurrentModule = TightBindingLattice","category":"page"},{"location":"API/symmetry/#AbstractSymmetry","page":"Symmetry","title":"AbstractSymmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"AbstractSymmetry","category":"page"},{"location":"API/symmetry/#TightBindingLattice.AbstractSymmetry","page":"Symmetry","title":"TightBindingLattice.AbstractSymmetry","text":"AbstractSymmetry{OperationType<:AbstractSpaceSymmetryOperation}\n\nAbstract symmetry whose elements are of type OperationType.\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry/#TranslationSymmetry","page":"Symmetry","title":"TranslationSymmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"TranslationSymmetry","category":"page"},{"location":"API/symmetry/#TightBindingLattice.TranslationSymmetry","page":"Symmetry","title":"TightBindingLattice.TranslationSymmetry","text":"TranslationSymmetry\n\nRepresent lattice translation symmetry.\n\njulia> TranslationSymmetry([3 0; 0 2])\n\nFields\n\northocube::OrthoCube\nelements::Vector{TranslationOperation{Int}}\ngroup::FiniteGroup\n\nAdditional Fields\n\ngenerators::Vector{Int}\nconjugacy_classes::Vector{Vector{Int}}\ncharacter_table::Matrix{ComplexF64}\nirreps::Vector{Vector{Matrix{ComplexF64}}}\nelement_names::Vector{String}\n\nCache Fields\n\ngenerator_translations::Matrix{Int}\ncoordinates::Vector{Vector{Int}}\northogonal_shape::Vector{Int}\northogonal_coordinates::Vector{Vector{Int}}\northogonal_to_coordinate_map::Dict{Vector{Int}, Vector{Int}}\ncoordinate_to_orthogonal_map::Dict{Vector{Int}, Vector{Int}}\northogonal_shape_matrix::Matrix{Int}\northogonal_reduced_reciprocal_shape_matrix::Matrix{Rational{Int}}\nfractional_momenta::Vector{Vector{Rational{Int}}}\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry/#Constructors","page":"Symmetry","title":"Constructors","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"TranslationSymmetry(::Matrix{Int})\nTranslationSymmetry(::Lattice)\nTranslationSymmetry(::OrthoCube)\nTranslationSymmetry(::OrthoCube, ::Matrix{Int})","category":"page"},{"location":"API/symmetry/#TightBindingLattice.TranslationSymmetry-Tuple{Array{Int64,2}}","page":"Symmetry","title":"TightBindingLattice.TranslationSymmetry","text":"TranslationSymmetry(shape::Matrix{<:Integer}; tol=√ϵ)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.TranslationSymmetry-Tuple{Lattice}","page":"Symmetry","title":"TightBindingLattice.TranslationSymmetry","text":"TranslationSymmetry(lattice::Lattice; tol=√ϵ)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.TranslationSymmetry-Tuple{OrthoCube}","page":"Symmetry","title":"TightBindingLattice.TranslationSymmetry","text":"TranslationSymmetry(orthocube::OrthoCube; tol=√ϵ)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.TranslationSymmetry-Tuple{OrthoCube,Array{Int64,2}}","page":"Symmetry","title":"TightBindingLattice.TranslationSymmetry","text":"TranslationSymmetry(orthocube::OrthoCube, generators::AbstractMatrix{<:Integer}; tol::Real=Base.rtoldefault(Float64))\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Common-Functions-for-Symmetry","page":"Symmetry","title":"Common Functions for Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"dimension(::TranslationSymmetry)\nelements(::TranslationSymmetry)\nelement(::TranslationSymmetry, ::Any)\nelement_names(::TranslationSymmetry)\nelement_name(::TranslationSymmetry, ::Any)\ngroup(::TranslationSymmetry)\ngroup_order(::TranslationSymmetry, ::Any)\ngroup_multiplication_table(::TranslationSymmetry)\ngenerator_indices(::TranslationSymmetry)\ngenerator_elements(::TranslationSymmetry)\nsymmetry_name(::TranslationSymmetry)\nsymmetry_product(::TranslationSymmetry)","category":"page"},{"location":"API/symmetry/#TightBindingLattice.dimension-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.dimension","text":"dimension(sym::TranslationSymmetry)\n\nSpatial dimension of the translation symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.elements-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.elements","text":"elements(sym::TranslationSymmetry)\n\nGet the elements of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element-Tuple{TranslationSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element","text":"element(sym::TranslationSymmetry, i)\n\nGet the ith element of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_names-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.element_names","text":"element_names(sym::TranslationSymmetry)\n\nGet the names of the elements of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_name-Tuple{TranslationSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element_name","text":"element_name(sym::TranslationSymmetry, i)\n\nGet the name of the ith element of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.group","text":"group(sym::TranslationSymmetry)\n\nGroup structure of the translation symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_order-Tuple{TranslationSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.group_order","text":"group_order(sym::TranslationSymmetry, g...)\n\nGroup order of the translation symmetry. Calls group_order(group(sym), g...)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_multiplication_table-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(sym::TranslationSymmetry)\n\nGroup multiplication table of the translation symmetry. Calls group_multiplication_table(group(sym))\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_indices-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_indices","text":"generator_indices(sym::TranslationSymmetry)\n\nReturn indices of the generating translations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_elements-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_elements","text":"generator_elements(sym::TranslationSymmetry)\n\nReturn the generating translation operations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.symmetry_name-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.symmetry_name","text":"symmetry_name(sym::TranslationSymmetry)\n\nName of the translation symmetry. Return TranslationSymmetry[(n11,n21)x(n12,n22)].\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.symmetry_product-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(tsym::TranslationSymmetry)\n\nReturn a binary function which combines two translation operations, with the given periodic boundary condition.\n\njulia> using TightBindingLattice\n\njulia> tsym = TranslationSymmetry([3 0; 0 4]);\n\njulia> p = symmetry_product(tsym);\n\njulia> p(TranslationOperation([2, 1]), TranslationOperation([2, 3]))\nTranslationOperation{Int64}([1, 0])\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Irreducible-Representations","page":"Symmetry","title":"Irreducible Representations","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"character_table(::TranslationSymmetry)\nirreps(::TranslationSymmetry)\nirrep(::TranslationSymmetry, ::Any)\nnum_irreps(::TranslationSymmetry)\nnumirreps(::TranslationSymmetry)\nirrepcount(::TranslationSymmetry)\nirrep_dimension(::TranslationSymmetry, ::Int)","category":"page"},{"location":"API/symmetry/#TightBindingLattice.character_table-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.character_table","text":"character_table(sym::TranslationSymmetry)\n\nReturn the character table of the translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irreps-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.irreps","text":"irreps(sym::TranslationSymmetry)\n\nReturn the irreducible representations of the translation symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrep-Tuple{TranslationSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.irrep","text":"irrep(sym::TranslationSymmetry, idx)\n\nReturn the idxth irreducible representation of the translation symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.num_irreps-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.num_irreps","text":"num_irreps(sym::TranslationSymmetry)\n\nReturn the number of irreducible representations of the translation symmetry, i.e. number of allowed momentum points. Aliases: num_irreps, numirreps, irrepcount\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.numirreps-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.numirreps","text":"numirreps(sym::TranslationSymmetry)\n\nReturn the number of irreducible representations of the translation symmetry, i.e. number of allowed momentum points. Aliases: num_irreps, numirreps, irrepcount\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrepcount-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.irrepcount","text":"irrepcount(sym::TranslationSymmetry)\n\nReturn the number of irreducible representations of the translation symmetry, i.e. number of allowed momentum points. Aliases: num_irreps, numirreps, irrepcount\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrep_dimension-Tuple{TranslationSymmetry,Int64}","page":"Symmetry","title":"TightBindingLattice.irrep_dimension","text":"irrep_dimension(sym::TranslationSymmetry, idx::Integer)\n\nDimension of the idxth irrep of the translation symmetry, which is always 1 for translation symmetry which is Abelian.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Functions-Specific-to-Translation-Symmetry","page":"Symmetry","title":"Functions Specific to Translation Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"fractional_momentum(::TranslationSymmetry)\nisbragg(::Vector{Int}, ::Vector{Int}, ::Vector{Int})\nisbragg(::Vector{Int}, ::Vector{Int}, ::Vector{Vector{Int}})\nisbragg(::Vector{Rational{Int}}, ::Vector{Int})\nisbragg(::Vector{Rational{Int}}, ::Vector{Vector{Int}})\nisbragg(::TranslationSymmetry, ::Int, ::TranslationOperation{Int})\nisbragg(::TranslationSymmetry, ::Int, ::Vector{TranslationOperation{Int}})","category":"page"},{"location":"API/symmetry/#TightBindingLattice.fractional_momentum-Tuple{TranslationSymmetry}","page":"Symmetry","title":"TightBindingLattice.fractional_momentum","text":"fractional_momentum(sym::TranslationSymmetry, g...)\n\nReturn the gth fractional momentum of the translation symmetry.\n\n\n\n\n\nfractional_momentum(sym, g)\n\nReturn the gth fractional momentum of the normal (translation) symmetry.\n\nArguments\n\nsym::SymmorphicSymmetry{<:TranslationSymmetry, S2, E}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{Array{Int64,1},Array{Int64,1},Array{Int64,1}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(shape, integer_momentum, identity_translation)\n\nTest whether an orthogonal momentum is compatible with the identity translation. Since identity translation can only be in the trivial representation (otherwise the phases cancel), this function tests whether the phase is unity. The orthogonal momentum is given as an integer vector.\n\n  t(rho) vert psi(k) rangle\n    = exp(i k cdot rho ) vert psi(k) rangle\n    = vert psi(k) rangle\n\nWhen the orthogonal shape is [n₁, n₂, ...], orthogonal momentum is chosen from {0, 1, ..., n₁-1} × {0,1, ..., n₂-1} × ....\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{Array{Int64,1},Array{Int64,1},Array{Array{Int64,1},1}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(shape, integer_momentum, identity_translations)\n\nCheck for Bragg condition at the integer momentum for all the identity translations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{Array{Rational{Int64},1},Array{Int64,1}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(k, t)\n\nCheck for Bragg condition at momentum k and translation t. Fractional momentum is normalized to 1, i.e. lies within [0, 1)ⁿ\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{Array{Rational{Int64},1},Array{Array{Int64,1},1}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(k, translations)\n\nCheck for Bragg condition at k for all the translations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{TranslationSymmetry,Int64,TranslationOperation{Int64}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(tsym, tsym_irrep_index, translation)\n\nCheck for Bragg condition at momentum given by the tsym_irrep_index.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.isbragg-Tuple{TranslationSymmetry,Int64,Array{TranslationOperation{Int64},1}}","page":"Symmetry","title":"TightBindingLattice.isbragg","text":"isbragg(tsym, tsym_irrep_index, translations)\n\nCheck for Bragg condition at momentum given by the tsym_irrep_index for all translations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#PointSymmetry","page":"Symmetry","title":"PointSymmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"PointSymmetry","category":"page"},{"location":"API/symmetry/#TightBindingLattice.PointSymmetry","page":"Symmetry","title":"TightBindingLattice.PointSymmetry","text":"PointSymmetry\n\nArguments\n\nelements::Vector{PointOperation{Int}}\ngroup::FiniteGroup\ngenerators::Vector{Int}\nconjugacy_classes::Vector{Vector{Int}}\ncharacter_table::Matrix{ComplexF64}\nirreps::Vector{Vector{Matrix{ComplexF64}}}\nelement_names::Vector{String}\nmatrix_representations::Vector{Matrix{Int}}\nhermann_mauguin::String\nschoenflies::String\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry/#Common-Functions-for-Symmetry-2","page":"Symmetry","title":"Common Functions for Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"dimension(::PointSymmetry)\nelements(::PointSymmetry)\nelement(::PointSymmetry, ::Any)\nelement_names(::PointSymmetry)\nelement_name(::PointSymmetry, ::Any)\ngroup(::PointSymmetry)\ngroup_order(::PointSymmetry)\ngroup_multiplication_table(::PointSymmetry)\ngenerator_indices(::PointSymmetry)\ngenerator_elements(::PointSymmetry)\nsymmetry_name(::PointSymmetry)\nsymmetry_product(::PointSymmetry)","category":"page"},{"location":"API/symmetry/#TightBindingLattice.dimension-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.dimension","text":"dimension(sym::PointSymmetry)\n\nSpatial dimension of the point symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.elements-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.elements","text":"elements(sym::PointSymmetry)\n\nReturn the elements of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element-Tuple{PointSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element","text":"element(sym::PointSymmetry, i)\n\nReturn the ith element of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_names-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.element_names","text":"element_names(sym::PointSymmetry)\n\nReturn the names of the elements of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_name-Tuple{PointSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element_name","text":"element_name(sym::PointSymmetry, i)\n\nReturn the name of the ith element of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.group","text":"group(sym::PointSymmetry)\n\nGroup structure of the point symmetry\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_order-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.group_order","text":"group_order(sym::PointSymmetry, g...)\n\nGroup order of the point symmetry. Calls group_order(group(sym), g...)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_multiplication_table-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(sym::PointSymmetry)\n\nGroup multiplication table of the point symmetry. Calls group_multiplication_table(group(sym))\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_indices-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_indices","text":"generator_indices(sym::PointSymmetry)\n\nReturn indices of the generating translations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_elements-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_elements","text":"generator_elements(sym::PointSymmetry)\n\nReturn the generating point operations.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.symmetry_name-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.symmetry_name","text":"symmetry_name(sym::TranslationSymmetry)\n\nName of the point symmetry. Return TranslationSymmetry[<Hermann Mauguin>].\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.symmetry_product-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(psym::PointSymmetry)\n\nReturn a function which takes two point operations and combines them. Not really necessary, but is defined for consistency with translation symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Irreducible-Representations-2","page":"Symmetry","title":"Irreducible Representations","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"character_table(::PointSymmetry)\nirreps(::PointSymmetry)\nirrep(::PointSymmetry, ::Int)\nnum_irreps(::PointSymmetry)\nnumirreps(::PointSymmetry)\nirrepcount(::PointSymmetry)\nirrep_dimension(::PointSymmetry, ::Int)","category":"page"},{"location":"API/symmetry/#TightBindingLattice.character_table-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.character_table","text":"character_table(sym::PointSymmetry)\n\nReturn the character table of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irreps-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.irreps","text":"irreps(sym::PointSymmetry)\n\nReturn the irreducible representations of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrep-Tuple{PointSymmetry,Int64}","page":"Symmetry","title":"TightBindingLattice.irrep","text":"irrep(sym::PointSymmetry, idx::Integer)\n\nReturn the idxth irreducible representation of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.num_irreps-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.num_irreps","text":"num_irreps(sym::PointSymmetry)\n\nReturn the number of irreducible representations of the point symmetry. Aliases: num_irreps(::PointSymmetry), numirreps(::PointSymmetry), irrepcount(::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.numirreps-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.numirreps","text":"numirreps(sym::PointSymmetry)\n\nReturn the number of irreducible representations of the point symmetry. Aliases: num_irreps(::PointSymmetry), numirreps(::PointSymmetry), irrepcount(::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrepcount-Tuple{PointSymmetry}","page":"Symmetry","title":"TightBindingLattice.irrepcount","text":"irrepcount(sym::PointSymmetry)\n\nReturn the number of irreducible representations of the point symmetry. Aliases: num_irreps(::PointSymmetry), numirreps(::PointSymmetry), irrepcount(::PointSymmetry)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.irrep_dimension-Tuple{PointSymmetry,Int64}","page":"Symmetry","title":"TightBindingLattice.irrep_dimension","text":"irrep_dimension(sym::PointSymmetry, idx::Integer)\n\nDimension of the idxth irrep of the point symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Projection-to-Subspace","page":"Symmetry","title":"Projection to Subspace","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"project(::PointSymmetry, ::Matrix{Int})","category":"page"},{"location":"API/symmetry/#TightBindingLattice.project-Tuple{PointSymmetry,Array{Int64,2}}","page":"Symmetry","title":"TightBindingLattice.project","text":"project(psym, projection; tol=√ϵ)\n\nProject psym to a subspace using projection\n\nArguments\n\npsym::PointSymmetry\nprojection::AbstractMatrix{<:Integer}: n × d matrix, where d ≤ n.\n\nOptional Arguments\n\ntol::Real: singular values of projection must be 1 up to tolerance.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#Little-Symmetry","page":"Symmetry","title":"Little Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"little_group_elements\nlittle_group\nlittle_symmetry","category":"page"},{"location":"API/symmetry/#TightBindingLattice.little_group_elements","page":"Symmetry","title":"TightBindingLattice.little_group_elements","text":"little_group_elements(tsym, psym)\n\nReturn elements of psym compatible with the translation symmetry tsym.\n\n\n\n\n\nlittle_group_elements(tsym, tsym_irrep_index, psym)\n\nReturn elements of psym compatible with the translation symmetry tsym at irrep tsym_irrep_index\n\n\n\n\n\nlittle_group_elements(tsymbed, psymbed)\n\n\n\n\n\nlittle_group_elements(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\nlittle_group_elements(tsic, psym)\n\nReturn little group elements (i.e. indices) of psym corresponding to the irrep of translation symmetry specified by tsic. tsic and psym are either\n\nIrrepComponent{TranslationSymmetry} and PointSymmetry, or\nIrrepComponent{SymmetryEmbedding{TranslationSymmetry}} and SymmetryEmbedding{PointSymmetry}\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.little_group","page":"Symmetry","title":"TightBindingLattice.little_group","text":"little_group(tsym, tsym_irrep_index, psym)\n\n\n\n\n\nlittle_group(tsym, psym, elements)\n\nGenerate a little group with given elements. The elements of the little group, which may be sparse, are compressed into consecutive integers.\n\n\n\n\n\nlittle_group(tsic, psym)\n\nReturn the FiniteGroup object that corresponds to the little group of psym at tsic.\n\n\n\n\n\nlittle_group(tsic, psymbed)\n\nReturn the FiniteGroup object that corresponds to the little group of psymbed at tsic.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.little_symmetry","page":"Symmetry","title":"TightBindingLattice.little_symmetry","text":"little_symmetry(tsym, psym, lg_elements)\n\nGenerate a little symmetry. First generate a little group with lg_elements, look up PointSymmetryDatabase using the names of the elements, and then checks for group isomorphism.\n\nArguments\n\ntsym::TranslationSymmetry: translation symmetry\npsym::PointSymmetry: point symmetry\nlg_elements::AbstractVector{<:Integer}: indices of the elements of the little group\n\n\n\n\n\nlittle_symmetry(tsym, psym)\n\n\n\n\n\nlittle_symmetry(tsym, tsym_irrep_index, psym)\n\n\n\n\n\nlittle_symmetry(tsymbed, psymbed)\n\n\n\n\n\nlittle_symmetry(tsymbed, tsym_irrep_index, psymbed)\n\n\n\n\n\nlittle_symmetry(tsic, psym)\n\nReturn the PointSymmetry object that corresponds to the little group of psym at tsic.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#Compatibility","page":"Symmetry","title":"Compatibility","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"iscompatible","category":"page"},{"location":"API/symmetry/#TightBindingLattice.iscompatible","page":"Symmetry","title":"TightBindingLattice.iscompatible","text":"iscompatible(orthocube, operator::TranslationOperation{<:Integer})\n\n\n\n\n\niscompatible(orthocube, operator::PointOperation{<:Integer})\n\n\n\n\n\niscompatible(orthocube, symmetry::TranslationSymmetry)\n\n\n\n\n\niscompatible(orthocube, symmetry::PointSymmetry)\n\n\n\n\n\niscompatible(tsym::TranslationSymmetry, pop::PointOperation{<:Integer})\n\n\n\n\n\niscompatible(tsym::TranslationSymmetry, psym::PointSymmetry)\n\n\n\n\n\niscompatible(psym::PointSymmetry, tsym::TranslationSymmetry)\n\n\n\n\n\niscompatible(tsym, tsym_irrep_index, point_operation)\n\n\n\n\n\niscompatible(tsym, tsym_irrep_index, psym)\n\n\n\n\n\niscompatible(lattice, translation_operation)\n\n\n\n\n\niscompatible(lattice, point_operation)\n\n\n\n\n\niscompatible(lattice, translation_symmetry)\n\nTest whether lattice and the symmetry are compatible. For translation symmetry, this means that the hypercubic lattice for both are the same.\n\n\n\n\n\niscompatible(lattice, point_symmetry)\n\n\n\n\n\niscompatible(tsymbed, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry embedding tsymbed, i.e. whether they have the same \"lattice\".\n\n\n\n\n\niscompatible(tsymbed, tsym_irrep_index, psymbed)\n\nCheck whether the point symmetry embedding psymbed is compatible with the translation symmetry irrep defined by tsym_irrep_index and symmetry(tsymbed). In other words, the little group elements\n\n\n\n\n\niscompatible(tsic, psym)\n\nTest whether the point symmetry psym is compatible with the irrep component tsic (i.e. momentum) of the translation symmetry.\n\n\n\n\n\niscompatible(lattice::Lattice, ssym::SymmorphicSymmetry)\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#PointSymmetryDatabase","page":"Symmetry","title":"PointSymmetryDatabase","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"PointSymmetryDatabase.get2d\nPointSymmetryDatabase.get3d\nPointSymmetryDatabase.find2d\nPointSymmetryDatabase.find3d","category":"page"},{"location":"API/symmetry/#TightBindingLattice.PointSymmetryDatabase.get2d","page":"Symmetry","title":"TightBindingLattice.PointSymmetryDatabase.get2d","text":"get2d(group_index::Integer)\n\nGet the group_indexth two-dimensional point group symmetry. Ref: [https://www.cryst.ehu.es]\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.PointSymmetryDatabase.get3d","page":"Symmetry","title":"TightBindingLattice.PointSymmetryDatabase.get3d","text":"get3d(group_index::Integer)\n\nGet the group_indexth three-dimensional point group symmetry. Ref: [https://www.cryst.ehu.es]\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.PointSymmetryDatabase.find2d","page":"Symmetry","title":"TightBindingLattice.PointSymmetryDatabase.find2d","text":"find2d(group_name::AbstractString)\n\nFind a two-dimensional point group symmetry by Hermann-Mauguin name. Ref: https://www.cryst.ehu.es/\n\n\n\n\n\nfind2d(element_names::AbstractVector{<:AbstractString})\n\nFind a two-dimensional point group symmetry by element names. The names must be \"simplified\", without any subscripts.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.PointSymmetryDatabase.find3d","page":"Symmetry","title":"TightBindingLattice.PointSymmetryDatabase.find3d","text":"find3d(group_name::AbstractString)\n\nFind a three-dimensional point group symmetry by Hermann-Mauguin name. Ref: https://www.cryst.ehu.es/\n\n\n\n\n\nfind3d(element_names::AbstractVector{<:AbstractString})\n\nFind a three-dimensional point group symmetry by element names. The names must be \"simplified\", without any subscripts.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#Symmorphic-Symmetry","page":"Symmetry","title":"Symmorphic Symmetry","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"SymmorphicSymmetry","category":"page"},{"location":"API/symmetry/#TightBindingLattice.SymmorphicSymmetry","page":"Symmetry","title":"TightBindingLattice.SymmorphicSymmetry","text":"SymmorphicSymmetry{S1, S2, E}\n\nSymmorphic symmetry of symmetry S1 ⋊ S2, whose elements are of type E. For symmorphic space group, the normal symmetry S1 is translation symmetry, and S2 is point symmetry. S1 and S2 can either be AbstractSymmetry or SymmetryEmbedding.\n\nFields\n\nnormal::S1: normal subgroup\nrest::S2\nelements::Array{E}\nelement_names::Array{String}\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry/#Operators","page":"Symmetry","title":"Operators","text":"","category":"section"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"⋊\n⋉","category":"page"},{"location":"API/symmetry/#TightBindingLattice.:⋊","page":"Symmetry","title":"TightBindingLattice.:⋊","text":"⋊(normal::AbstractSymmetry, rest::AbstractSymmetry)\n\nReturn symmorphic symmetry normal ⋊ rest.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/#TightBindingLattice.:⋉","page":"Symmetry","title":"TightBindingLattice.:⋉","text":"⋉(rest::AbstractSymmetry, normal::AbstractSymmetry)\n\nReturn symmorphic symmetry normal ⋊ rest.\n\n\n\n\n\n","category":"function"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"symmetry_product(::SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,SpaceOperation{Int}})","category":"page"},{"location":"API/symmetry/#TightBindingLattice.symmetry_product-Tuple{SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,SpaceOperation{Int64,Tt} where Tt<:Real}}","page":"Symmetry","title":"TightBindingLattice.symmetry_product","text":"symmetry_product(sym)\n\nArguments\n\nsym::SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,S}) where {S<:SpaceOperation{<:Integer}}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/","page":"Symmetry","title":"Symmetry","text":"group(::SymmorphicSymmetry)\ngroup_order(::SymmorphicSymmetry)\ngroup_multiplication_table(::SymmorphicSymmetry)\nelements(::SymmorphicSymmetry)\nelement(::SymmorphicSymmetry, ::Any)\nelement_names(::SymmorphicSymmetry)\nelement_name(::SymmorphicSymmetry, ::Any)\nfractional_momentum(::SymmorphicSymmetry{TranslationSymmetry, PointSymmetry, SpaceOperation})\ngenerator_indices(::SymmorphicSymmetry)\ngenerator_elements(::SymmorphicSymmetry)","category":"page"},{"location":"API/symmetry/#TightBindingLattice.group-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.group","text":"group(sym::SymmorphicSymmetry)\n\nReturn FiniteGroup of the elements.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_order-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.group_order","text":"group_order(sym::SymmorphicSymmetry)\n\nGroup order of sym, which is the product of the subgroup and the normal subgroup.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.group_multiplication_table-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(sym::SymmorphicSymmetry)\n\nReturn group multiplication table of sym.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.elements-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.elements","text":"elements(sym::SymmorphicSymmetry)\n\nReturn the elements of the symmorphic symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element-Tuple{SymmorphicSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element","text":"element(sym::SymmorphicSymmetry, g...)\n\nReturn the ith element of the symmorphic symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_names-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.element_names","text":"element_names(sym::SymmorphicSymmetry)\n\nReturn the element names of the symmorphic symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.element_name-Tuple{SymmorphicSymmetry,Any}","page":"Symmetry","title":"TightBindingLattice.element_name","text":"element_name(sym::SymmorphicSymmetry, g...)\n\nReturn the name of the gth element of the symmorphic symmetry.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.fractional_momentum-Tuple{SymmorphicSymmetry{TranslationSymmetry,PointSymmetry,SpaceOperation}}","page":"Symmetry","title":"TightBindingLattice.fractional_momentum","text":"fractional_momentum(sym, g)\n\nReturn the gth fractional momentum of the normal (translation) symmetry.\n\nArguments\n\nsym::SymmorphicSymmetry{<:TranslationSymmetry, S2, E}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_indices-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_indices","text":"generator_indices(sym::SymmorphicSymmetry)\n\nReturn the indices of the generators, which is a union of the generators of normal and rest.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry/#TightBindingLattice.generator_elements-Tuple{SymmorphicSymmetry}","page":"Symmetry","title":"TightBindingLattice.generator_elements","text":"generator_elements(sym::SymmorphicSymmetry)\n\nReturn the generating elements\n\n\n\n\n\n","category":"method"},{"location":"generated/example_point_group_4mm/","page":"Point Group 4mm (C₄ᵥ)","title":"Point Group 4mm (C₄ᵥ)","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_point_group_4mm.jl\"","category":"page"},{"location":"generated/example_point_group_4mm/#Point-group-4mm-(Cᵥ)","page":"Point Group 4mm (C₄ᵥ)","title":"Point group 4mm (C₄ᵥ)","text":"","category":"section"},{"location":"generated/example_point_group_4mm/#Preamble","page":"Point Group 4mm (C₄ᵥ)","title":"Preamble","text":"","category":"section"},{"location":"generated/example_point_group_4mm/","page":"Point Group 4mm (C₄ᵥ)","title":"Point Group 4mm (C₄ᵥ)","text":"using TightBindingLattice\nusing Formatting: printfmt\n\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/#Irreps-of-4mm","page":"Point Group 4mm (C₄ᵥ)","title":"Irreps of 4mm","text":"","category":"section"},{"location":"generated/example_point_group_4mm/","page":"Point Group 4mm (C₄ᵥ)","title":"Point Group 4mm (C₄ᵥ)","text":"point_symmetry = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0])\nprintln(\"symmetry: \", point_symmetry.hermann_mauguin)\nprintln(\"order: \", group_order(point_symmetry))\nprintln(\"irreducible_representations:\")\nfor irrep_index in 1:num_irreps(point_symmetry)\n    println(\"- name: GM($irrep_index)\")\n    println(\"  elements:\")\n    for (ename, mat) in zip(element_names(point_symmetry), irrep(point_symmetry, irrep_index))\n        println(\"  - name: \\\"$ename\\\"\")\n        m = Int.(real.(mat))\n        if size(m, 1) == 1\n            println(\"    matrix: $(first(m))\")\n        else\n            println(\"    matrix: |-\")\n            display_matrix(stdout, m; prefix=\"      \")\n        end\n    end\nend","category":"page"},{"location":"generated/example_point_group_4mm/","page":"Point Group 4mm (C₄ᵥ)","title":"Point Group 4mm (C₄ᵥ)","text":"","category":"page"},{"location":"generated/example_point_group_4mm/","page":"Point Group 4mm (C₄ᵥ)","title":"Point Group 4mm (C₄ᵥ)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_group_isomorphism.jl\"","category":"page"},{"location":"generated/example_group_isomorphism/#Group-Isomorphism","page":"Group Isomorphism","title":"Group Isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/#Set-up-Basic-Functions","page":"Group Isomorphism","title":"Set up Basic Functions","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"using TightBindingLattice\nusing Formatting\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            print(io, icol == 1 ? prefix : \" \")\n            printfmt(io, \"{:>$(width)s}\", \"$col\")\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_group_isomorphism/#Generate-Two-Isomorphic-Groups","page":"Group Isomorphism","title":"Generate Two Isomorphic Groups","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"group1 = FiniteGroup([\n    1 2 3 4;\n    2 1 4 3;\n    3 4 2 1;\n    4 3 1 2;\n]);\ngroup2 = let mtab1 = group1.multiplication_table,\n             mtab2 = zeros(Int, (4, 4)),\n             mapping = [1, 3, 2, 4]\n             for i in 1:4, j in 1:4\n                 mtab2[mapping[i], mapping[j]] = mapping[mtab1[i,j]]\n             end\n             FiniteGroup(mtab2)\n         end;\nnothing #hide","category":"page"},{"location":"generated/example_group_isomorphism/#Group-Multiplication-Tables","page":"Group Isomorphism","title":"Group Multiplication Tables","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"println(\"Multiplication Table of G₁\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group1))\nprintln()\n\nprintln(\"Multiplication Table of G₂\")\nprintln(\"--------------------------\")\ndisplay_matrix(stdout, group_multiplication_table(group2))\nprintln()","category":"page"},{"location":"generated/example_group_isomorphism/#Group-Isomorphism-2","page":"Group Isomorphism","title":"Group Isomorphism","text":"","category":"section"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"println(\"Group Isomorphism  ϕ: G₁ → G₂\")\nprintln(\"-----------------------------\")\nϕ = group_isomorphism(group1, group2)\nfor g in 1:group_order(group1)\n    println(\"  ϕ($g) = $(ϕ[g])\")\nend\nprintln()\n\nmtab2 = zeros(Int, (group_order(group1), group_order(group1)))\nfor g in 1:group_order(group1), h in 1:group_order(group1)\n    mtab2[ϕ[g], ϕ[h]] = ϕ[ group_product(group1, g, h) ]\nend\n\nprintln(\"Multiplication Table of ϕ(G₁)\")\nprintln(\"-----------------------------\")\ndisplay_matrix(stdout, mtab2)\nprintln()\nprintln(\"  ϕ(g)⋅ϕ(h) = ϕ(g⋅h)\")\nprintln(\"  ϕ(G₁) ≡ G₂ should hold.\")","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"","category":"page"},{"location":"generated/example_group_isomorphism/","page":"Group Isomorphism","title":"Group Isomorphism","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/symmetry-operation/#Symmetry-Operation","page":"Symmetry Operation","title":"Symmetry Operation","text":"","category":"section"},{"location":"API/symmetry-operation/#AbstractSpaceSymmetryOperation","page":"Symmetry Operation","title":"AbstractSpaceSymmetryOperation","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"AbstractSpaceSymmetryOperation\ndomaintype(::AbstractSpaceSymmetryOperation)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.AbstractSpaceSymmetryOperation","page":"Symmetry Operation","title":"TightBindingLattice.AbstractSpaceSymmetryOperation","text":"AbstractSpaceSymmetryOperation{S<:Real}\n\nAbstract space symmetry operation, i.e. translation, point, and space operation. See also TranslationOperation, PointOperation, SpaceOperation.\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-operation/#TightBindingLattice.domaintype-Tuple{AbstractSpaceSymmetryOperation}","page":"Symmetry Operation","title":"TightBindingLattice.domaintype","text":"domaintype(arg::AbstractSpaceSymmetryOperation{S}) where {S<:Real}\n\nDomain type of arg, i.e. the type of the coordinates.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#IdentityOperation","page":"Symmetry Operation","title":"IdentityOperation","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"IdentityOperation","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.IdentityOperation","page":"Symmetry Operation","title":"TightBindingLattice.IdentityOperation","text":"IdentityOperation{S<:Real} <: AbstractSpaceSymmetryOperation{S}\n\nRepresents identity (space symmetry) operation\n\nFields\n\ndimension::Int: dimension of the space on which the identity operation acts\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-operation/#Constructors","page":"Symmetry Operation","title":"Constructors","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"IdentityOperation(::Type{Int}, ::Int)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.IdentityOperation-Tuple{Type{Int64},Int64}","page":"Symmetry Operation","title":"TightBindingLattice.IdentityOperation","text":"IdentityOperation(S, dim::Integer)\n\nConstruct an identity operation of dimension dim, on coordinates of type S.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Properties","page":"Symmetry Operation","title":"Properties","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"isidentity(::IdentityOperation)\nistranslation(::IdentityOperation)\nispoint(::IdentityOperation)\ndimension(::IdentityOperation)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.isidentity-Tuple{IdentityOperation}","page":"Symmetry Operation","title":"TightBindingLattice.isidentity","text":"isidentity(arg::IdentityOperation)\n\nCheck whether the argument is an identity. Always true.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.istranslation-Tuple{IdentityOperation}","page":"Symmetry Operation","title":"TightBindingLattice.istranslation","text":"istranslation(arg::IdentityOperation)\n\nCheck whether the argument is a translation operation. Always true.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.ispoint-Tuple{IdentityOperation}","page":"Symmetry Operation","title":"TightBindingLattice.ispoint","text":"ispoint(arg::IdentityOperation)\n\nCheck whether the argument is a point operation. Always true.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.dimension-Tuple{IdentityOperation}","page":"Symmetry Operation","title":"TightBindingLattice.dimension","text":"dimension(arg::IdentityOperation)\n\nReturn the spatial dimension of the identity operation.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Apply","page":"Symmetry Operation","title":"Apply","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"apply_operation(::IdentityOperation{Int}, ::Vector{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.apply_operation-Tuple{IdentityOperation{Int64},Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.apply_operation","text":"apply_operation(identity{S}, coordinate::AbstractArray{S}) where {S<:Real}\n\nDo nothing.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TranslationOperation","page":"Symmetry Operation","title":"TranslationOperation","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"TranslationOperation","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.TranslationOperation","page":"Symmetry Operation","title":"TightBindingLattice.TranslationOperation","text":"TranslationOperation{S<:Real}\n\nRepresents translation symmetry operation\n\nFields\n\ndisplacement: displacement vector\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> TranslationOperation([1, 2])\nTranslationOperation{Int64}([1, 2])\n\njulia> TranslationOperation([0.5, 0.0, 0.5])\nTranslationOperation{Float64}([0.5, 0.0, 0.5])\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-operation/#Constructors-2","page":"Symmetry Operation","title":"Constructors","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"TranslationOperation{Int}(::Vector{Int})\nTranslationOperation(::Vector{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.TranslationOperation-Union{Tuple{Array{Int,1}}, Tuple{Int}} where Int","page":"Symmetry Operation","title":"TightBindingLattice.TranslationOperation","text":"TranslationOperation{S}(displacement::AbstractVector{<:Real}) where {S}\n\nConstruct a translation operation of displacement on coordinate space of type S.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.TranslationOperation-Tuple{Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.TranslationOperation","text":"TranslationOperation{S}(displacement::AbstractVector{<:Real}) where {S}\n\nConstruct a translation operation of displacement on coordinate space of type S.\n\n\n\n\n\nTranslationOperation(displacement::AbstractVector{S}) where {S<:Real}\n\nConstruct a translation operation of displacement on coordinate space of type S.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Properties-2","page":"Symmetry Operation","title":"Properties","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"isidentity(::TranslationOperation)\nistranslation(::TranslationOperation)\nispoint(::TranslationOperation)\ndimension(::TranslationOperation)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.isidentity-Tuple{TranslationOperation}","page":"Symmetry Operation","title":"TightBindingLattice.isidentity","text":"isidentity(t::TranslationOperation)\n\nReturn true if the translation operation is an identity, i.e. iszero(t.displacement)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.istranslation-Tuple{TranslationOperation}","page":"Symmetry Operation","title":"TightBindingLattice.istranslation","text":"istranslation(arg::TranslationOperation)\n\nAlways return true, since arg is already a translation operation.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.ispoint-Tuple{TranslationOperation}","page":"Symmetry Operation","title":"TightBindingLattice.ispoint","text":"ispoint(arg::TranslationOperation)\n\nReturn true if arg is a point operation. The only way this can be true is when arg is an identity operation.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.dimension-Tuple{TranslationOperation}","page":"Symmetry Operation","title":"TightBindingLattice.dimension","text":"dimension(arg::TranslationOperation)\n\nSpatial dimension of the translation operation\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Apply-2","page":"Symmetry Operation","title":"Apply","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"apply_operation(::TranslationOperation{Int}, ::Vector{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.apply_operation-Tuple{TranslationOperation{Int64},Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.apply_operation","text":"apply_operation(symop::TranslationOperation{S}, coordinate::AbstractArray{S}) where S\n\nReturn the translated coordinate.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#PointOperation","page":"Symmetry Operation","title":"PointOperation","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"PointOperation","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.PointOperation","page":"Symmetry Operation","title":"TightBindingLattice.PointOperation","text":"PointOperation{S<:Real}\n\nRepresents point symmetry operation\n\nFields\n\nmatrix: rotation/mirror/inversion matrix\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-operation/#Constructors-3","page":"Symmetry Operation","title":"Constructors","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"PointOperation(::Matrix{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.PointOperation-Tuple{Array{Int64,2}}","page":"Symmetry Operation","title":"TightBindingLattice.PointOperation","text":"PointOperation(matrix::AbstractMatrix{S}) where {S<:Real}\n\nConstruct a point operation with matrix.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Properties-3","page":"Symmetry Operation","title":"Properties","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"isidentity(::PointOperation)\nistranslation(::PointOperation)\nispoint(::PointOperation)\ndimension(::PointOperation)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.isidentity-Tuple{PointOperation}","page":"Symmetry Operation","title":"TightBindingLattice.isidentity","text":"isidentity(arg::PointOperation)\n\nCheck whether arg is identity.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.istranslation-Tuple{PointOperation}","page":"Symmetry Operation","title":"TightBindingLattice.istranslation","text":"istranslation(arg::PointOperation)\n\nCheck whether arg is a translation operation, i.e. identity.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.ispoint-Tuple{PointOperation}","page":"Symmetry Operation","title":"TightBindingLattice.ispoint","text":"ispoint(arg::PointOperation)\n\nCheck whether arg is a point operation. Always true.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.dimension-Tuple{PointOperation}","page":"Symmetry Operation","title":"TightBindingLattice.dimension","text":"dimension(arg::PointOperation)\n\nReturn spatial dimension of arg.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Apply-3","page":"Symmetry Operation","title":"Apply","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"apply_operation(::PointOperation{Int}, ::Vector{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.apply_operation-Tuple{PointOperation{Int64},Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.apply_operation","text":"apply_operation(symop::PointOperation{S}, coordinate::AbstractArray{S}) where {S}\n\nApply point operation to the coordinates.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#SpaceOperation","page":"Symmetry Operation","title":"SpaceOperation","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"SpaceOperation","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.SpaceOperation","page":"Symmetry Operation","title":"TightBindingLattice.SpaceOperation","text":"SpaceOperation{Tp<:Real, Tt<:Real}\n\nRepresent a spatial symmetry operation of the following form:\n\nS_M mathbfR mathbfr mapsto M cdot ( mathbfr + mathbfR )\n\nFields\n\nmatrix: Rotation matrix\ndisplacement: Displacement vector\n\n\n\n\n\n","category":"type"},{"location":"API/symmetry-operation/#Constructors-4","page":"Symmetry Operation","title":"Constructors","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"SpaceOperation(::Matrix{Int}, ::Vector{Int})\nSpaceOperation(::PointOperation{Int}, ::TranslationOperation{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.SpaceOperation-Tuple{Array{Int64,2},Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.SpaceOperation","text":"SpaceOperation(matrix::AbstractMatrix{Tp}, displacement::AbstractVector{Tt}) where {Tp<:Real, Tt<:Real}\n\nConstruct a space operation by matrix and displacement.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.SpaceOperation-Tuple{PointOperation{Int64},TranslationOperation{Int64}}","page":"Symmetry Operation","title":"TightBindingLattice.SpaceOperation","text":"SpaceOperation([point], [translation])\n\nConstruct a space operation by point and translation.\n\nArguments\n\npoint::PointOperation{Tp}\ntranslation::TranslationOperation{Tt}\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Properties-4","page":"Symmetry Operation","title":"Properties","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"isidentity(::SpaceOperation)\nistranslation(::SpaceOperation)\nispoint(::SpaceOperation)\ndimension(::SpaceOperation)","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.isidentity-Tuple{SpaceOperation}","page":"Symmetry Operation","title":"TightBindingLattice.isidentity","text":"isidentity(arg::SpaceOperation)\n\nCheck whether arg is identity (i.e. identity point and identity translation)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.istranslation-Tuple{SpaceOperation}","page":"Symmetry Operation","title":"TightBindingLattice.istranslation","text":"istranslation(arg::SpaceOperation)\n\nCheck whether arg is a translation operation (i.e., point operation is identity)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.ispoint-Tuple{SpaceOperation}","page":"Symmetry Operation","title":"TightBindingLattice.ispoint","text":"ispoint(arg::SpaceOperation)\n\nCheck whether arg is a point operation (i.e. translation is identity)\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#TightBindingLattice.dimension-Tuple{SpaceOperation}","page":"Symmetry Operation","title":"TightBindingLattice.dimension","text":"dimension(arg::SpaceOperation)\n\nReturn the spatial dimension of arg.\n\n\n\n\n\n","category":"method"},{"location":"API/symmetry-operation/#Apply-4","page":"Symmetry Operation","title":"Apply","text":"","category":"section"},{"location":"API/symmetry-operation/","page":"Symmetry Operation","title":"Symmetry Operation","text":"apply_operation(::SpaceOperation{Int}, ::Vector{Int})","category":"page"},{"location":"API/symmetry-operation/#TightBindingLattice.apply_operation-Tuple{SpaceOperation{Int64,Tt} where Tt<:Real,Array{Int64,1}}","page":"Symmetry Operation","title":"TightBindingLattice.apply_operation","text":"apply_operation(op::SpaceOperation{Tp, Tt}, coord::AbstractArray{<:Union{Tp, Tt}}) where {Tp, Tt}\n\n\n\n\n\n","category":"method"},{"location":"Symmetry/operation-space/#Symmetry-Operations","page":"Symmetry Operations","title":"Symmetry Operations","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"AbstractSpaceSymmetryOperation{S} represent spatial symmetry, including translation, and point operation, and the combination of the two. Here S is the type for the coordinates.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"using TightBindingLattice","category":"page"},{"location":"Symmetry/operation-space/#Translation-Operation","page":"Symmetry Operations","title":"Translation Operation","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"The type TranslationOperation{S} represents translation operation on the space of coordinates of type S.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"A translation operation can be of integer type or non-integer type.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"TranslationOperation([1, 2])\nTranslationOperation([0.5, 0.0, 0.5])\nTranslationOperation([1//2, 3//4])","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"On a lattice system with discrete translation symmetry, it is convenient to use integer translations of type TranslationOperation{Int}, which represent lattice translations.","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"A translation operation can be applied to coordinates","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"t = TranslationOperation([1, 2])\nt([3, 4])\napply_operation(t, [5, 6])","category":"page"},{"location":"Symmetry/operation-space/#Point-Operation","page":"Symmetry Operations","title":"Point Operation","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"Point operation is represented by the type PointOperation{S}, which includes rotation, inversion, and mirror operations. A lattice system where lattice vectors are not orthogonal, the matrix of the point operation need not be an orthogonal matrix. For example, a sixfold rotation on a triangular Bravais lattice may be written as the following","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"(Image: Sixfold rotation)","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"p = PointOperation([1 -1; 1 0])\np([1, 0])\np([0, 1])","category":"page"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"p = PointOperation([0 1; 1 0])\np([2, 5])","category":"page"},{"location":"Symmetry/operation-space/#Space-Operation","page":"Symmetry Operations","title":"Space Operation","text":"","category":"section"},{"location":"Symmetry/operation-space/","page":"Symmetry Operations","title":"Symmetry Operations","text":"s = SpaceOperation([1 -1; 1 0], [1, 0])\ns([1, 0])","category":"page"},{"location":"lattice/#Defining-a-Lattice","page":"Defining a Lattice","title":"Defining a Lattice","text":"","category":"section"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"A lattice is defined by the following components:","category":"page"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"lattice vectors\nsites\nBravais lattice","category":"page"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"The components 1 and 2 are stored in UnitCell, while the component 3 makes use of OrthoCube.","category":"page"},{"location":"lattice/#UnitCell","page":"Defining a Lattice","title":"UnitCell","text":"","category":"section"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"A UnitCell contains the lattice vectors, stored as a matrix whose columns are unit translation vectors, and list of sites, with their names and locations. The \"name\" can be of any arbitrary type (except integer, to avoid confusion with the site index), and the locations are stored as type FractCoord.","category":"page"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"Creating a UnitCell is straight forward: The following example defines a two-dimensional square unit cell with two sites, site A at location [0.1, 0], and site B at location [0.0, 0.1].","category":"page"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"using TightBindingLattice\nunitcell = makeunitcell([1.0 0.0; 0.0 1.0]; SiteType=String)\naddsite!(unitcell, \"A\", FractCoord([0,0], [0.1, 0.0]))\naddsite!(unitcell, \"B\", FractCoord([0,0], [0.0, 0.1]))\nunitcell","category":"page"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"Here FractCoord represents location in the fractional coordinates, i.e. in units of the lattice vectors, with whole (in mathbbZ^D) and fraction (in 0 1)^D) parts.","category":"page"},{"location":"lattice/#OrthoCube","page":"Defining a Lattice","title":"OrthoCube","text":"","category":"section"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"The Bravais lattice is represented by OrthoCube.","category":"page"},{"location":"lattice/#Lattice","page":"Defining a Lattice","title":"Lattice","text":"","category":"section"},{"location":"lattice/","page":"Defining a Lattice","title":"Defining a Lattice","text":"Now the two can be combined into a Lattice.","category":"page"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_orthocube.jl\"","category":"page"},{"location":"generated/example_orthocube/#Orthocube-Examples-(Bravais-Lattice)","page":"OrthoCube","title":"Orthocube Examples (Bravais Lattice)","text":"","category":"section"},{"location":"generated/example_orthocube/#Preamble","page":"OrthoCube","title":"Preamble","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"using TightBindingLattice\nusing Plots\nmkpath(\"example_orthocube\")\n\nfunction draw_orthocube(orthocube::OrthoCube, coordinates::AbstractMatrix{<:Integer})\n    xlim = (minimum(coordinates[1,:]) - 3.5, maximum(coordinates[1,:]) + 3.5)\n    ylim = (minimum(coordinates[2,:]) - 3.5, maximum(coordinates[2,:]) + 3.5)\n    boundary = let\n        r0 = [0,0]\n        r1 = orthocube.shape_matrix[:,1]\n        r2 = orthocube.shape_matrix[:,2]\n        hcat(r0, r1, r1 .+ r2, r2, r0)\n    end\n    fig = plot(boundary[1,:], boundary[2,:], label=\"\", size=(400, 400))\n    for Ri in Iterators.product(-1:1, -1:1)\n        alpha = (Ri == (0,0)) ? 1.0 : 0.1\n        Rr = orthocube.shape_matrix * [Ri...]\n        scatter!(coordinates[1,:] .+ Rr[1], coordinates[2,:] .+ Rr[2], aspect_ratio=1, markersize=12, xlim=xlim, ylim=ylim, markeralpha=alpha, label=\"\")\n        annotation = []\n        for i in 1:size(coordinates, 2)\n            x = coordinates[1,i] + Rr[1]\n            y = coordinates[2,i] + Rr[2]\n            if xlim[1] < x < xlim[2] && ylim[1] < y < ylim[2]\n                push!(annotation, (x, y, text(\"$i\", 8, :black, :center)))\n            end\n        end\n        if !isempty(annotation)\n            annotation = [annotation...]\n            annotate!(annotation)\n        end\n    end\n    fig\nend","category":"page"},{"location":"generated/example_orthocube/#(4,-4)-x-(4,4)","page":"OrthoCube","title":"(4,-4) x (4,4)","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"size_matrix = [ 4 4; -4 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(4,-4)x(4,4).svg\")","category":"page"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/#(2,-2)-x-(2,4)","page":"OrthoCube","title":"(2,-2) x (2,4)","text":"","category":"section"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"size_matrix = [ 2 2; -2 4]\northocube = OrthoCube(size_matrix)\ngenerator_translations = find_generators(orthocube)\ncoordinates = generate_coordinates(orthocube, generator_translations)\ncoordmat = hcat(coordinates...)\ndraw_orthocube(orthocube, coordmat)\nprintln(\"All elements\")\nfor (i, c) in enumerate(coordinates)\n    println(\"$i : $c\")\nend\nprintln(\"Generator translations\")\nfor (it, t) in enumerate(eachcol(generator_translations))\n    println(\"t($it) = $t\")\nend\ndraw_orthocube(orthocube, coordmat)\nsavefig(\"example_orthocube/bravais_(2,-2)x(2,4).svg\")","category":"page"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"(Image: )","category":"page"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"","category":"page"},{"location":"generated/example_orthocube/","page":"OrthoCube","title":"OrthoCube","text":"This page was generated using Literate.jl.","category":"page"},{"location":"Symmetry/irrep/#Irreducible-Representations","page":"Irreducible Representations","title":"Irreducible Representations","text":"","category":"section"},{"location":"Symmetry/irrep/","page":"Irreducible Representations","title":"Irreducible Representations","text":"Gamma_i","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_honeycomb_symmetry.jl\"","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Honeycomb-Lattice","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/#Preamble","page":"Honeycomb Lattice","title":"Preamble","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"using TightBindingLattice\nusing LinearAlgebra\nusing Plots\n\nsimplifyname(s::AbstractString) = (\n                    s |> (x-> replace(x, r\"<sup>(.+?)</sup>\" => s\"\\1\"))\n                      |> (x-> replace(x, r\"<sub>(.+?)</sub>\" => s\"[\\1]\"))\n                )\nmkpath(\"example_honeycomb_symmetry\")\nextent = [-2.5, 2.5, -2.5, 2.5]\nwithin(r) = (extent[1] <= r[1] <= extent[2] && extent[3] <= r[2] <= extent[4]);\nnothing #hide","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Set-up-Lattice-and-Symmetry","page":"Honeycomb Lattice","title":"Set up Lattice and Symmetry","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"scale_matrix = [2 2; -2 4]\n@assert det(scale_matrix) ≈ 12\n\nunitcell = makeunitcell([1 -0.5; 0 0.5*sqrt(3.0)])\naddsite!(unitcell, \"A\", carte2fract(unitcell, [0.5, 0.5/sqrt(3)]))\naddsite!(unitcell, \"B\", carte2fract(unitcell, [0.5,-0.5/sqrt(3)]))\n\nlattice = makelattice(unitcell, scale_matrix)\n\ntsymbed = translation_symmetry_embedding(lattice)\ntsym = symmetry(tsymbed)\npsym = project(PointSymmetryDatabase.get(25), [1 0 0; 0 1 0])\npsymbed = embed(lattice, psym)\n\nprint(\"Point group: \", psym.hermann_mauguin)","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Permutations","page":"Honeycomb Lattice","title":"Permutations","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"println(\"Translation Permutations\")\nprintln(\"------------------------\")\n\nfor t in tsymbed\n    println(t)\nend\nprintln()\n\nprintln(\"Point Permutations\")\nprintln(\"------------------\")\nfor p in psymbed\n    println(p)\nend\nprintln()","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-Translation-Symmetry-Embeddings","page":"Honeycomb Lattice","title":"Plots for Translation Symmetry Embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"for (i_elem, perm) in enumerate(elements(tsymbed))\n    elname = element_name(tsym, i_elem)\n    fig = plot(title=elname, aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.sites)\n        orbfc = getsitecoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(\n            orbcoords[1,idx_filt] .+ LR[1],\n            orbcoords[2,idx_filt] .+ LR[2],\n            color=\"blue\",\n            markerstrokecolor=\"blue\",\n            series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]],\n            label=nothing\n        )\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/translation_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/#Plots-for-Point-Symmetry-Embeddings","page":"Honeycomb Lattice","title":"Plots for Point Symmetry Embeddings","text":"","category":"section"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"for (i_elem, perm) in enumerate(elements(psymbed))\n    elname = element_name(psym, i_elem)\n    fig = plot(title=simplifyname(elname), aspect=1, size=(200, 250), grid=false, titlefont=Plots.font(\"sans-serif\", pointsize=8))\n    orbcoords = []\n    orbnames = []\n\n    for iorb in eachindex(lattice.supercell.sites)\n        orbfc = getsitecoord(lattice.supercell, perm(iorb))\n        orbcc = fract2carte(lattice.supercell, orbfc)\n        push!(orbnames, \"$iorb\")\n        push!(orbcoords, orbcc)\n    end\n    orbcoords = hcat(orbcoords...)\n    L = lattice.supercell.latticevectors\n    for R1 in -2:2, R2 in -2:2\n        R = [R1, R2]\n        LR = L * R\n        idx_filt = [i for (i, r) in enumerate(eachcol(orbcoords)) if within(r .+ LR)]\n        scatter!(\n            orbcoords[1,idx_filt] .+ LR[1],\n            orbcoords[2,idx_filt] .+ LR[2],\n            color=\"blue\",\n            markerstrokecolor=\"blue\",\n            series_annotations=[Plots.text(x, 6, :left, :bottom) for x in orbnames[idx_filt]],\n            label=nothing\n        )\n    end\n    xlims!(extent[1], extent[2])\n    ylims!(extent[3], extent[4])\n    savefig(fig, \"example_honeycomb_symmetry/point_symmetry-$i_elem.svg\")\nend","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"","category":"page"},{"location":"generated/example_honeycomb_symmetry/","page":"Honeycomb Lattice","title":"Honeycomb Lattice","text":"This page was generated using Literate.jl.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"<!– @autodocs --> Modules = [TightBindingLattice] Order = [:type, :function] <!-- –>","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_2d.jl\"","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group-in-2D","page":"Little Group in 2D","title":"Little Group in 2D","text":"","category":"section"},{"location":"generated/example_little_group_2d/#Preamble","page":"Little Group in 2D","title":"Preamble","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"using TightBindingLattice\nusing Formatting\nusing Plots\nfunction display_matrix(io::IO, matrix::AbstractMatrix; prefix::AbstractString=\"\")\n    width = ceil(Int, maximum(length(\"$item\") for item in matrix)/4)*4\n    for row in eachrow(matrix)\n        for (icol, col) in enumerate(row)\n            if icol == 1\n                print(io, prefix)\n                printfmt(io, \"{:>$(width)s}\", \"$col\")\n            else\n                printfmt(io, \" {:>$(width)s}\", \"$col\")\n            end\n        end\n        println(io)\n    end\nend","category":"page"},{"location":"generated/example_little_group_2d/#Set-up-Lattice-and-Symmetry","page":"Little Group in 2D","title":"Set up Lattice and Symmetry","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"unitcell = makeunitcell([1.0 0.0; 0.0 1.0]; SiteType=String);\naddsite!(unitcell, \"Ox\", FractCoord([0,0], [0.5, 0.0]));\naddsite!(unitcell, \"Oy\", FractCoord([0,0], [0.0, 0.5]));\n\nlattice = makelattice(unitcell, [4 0; 0 4]);\ntsym = TranslationSymmetry(lattice);\npsym = project(PointSymmetryDatabase.get(13), [1 0 0; 0 1 0]);\nnothing #hide","category":"page"},{"location":"generated/example_little_group_2d/#Little-Group","page":"Little Group in 2D","title":"Little Group","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"lge = little_group_elements(tsym, 2, psym)\nlg = little_group(tsym, 2, psym)\nprintln(\"Little Group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg))\n\n\nlg_matrep = psym.matrix_representations[lge]\nprintln(\"Matrix Representations: $lg_matrep\")","category":"page"},{"location":"generated/example_little_group_2d/#Finding-Point-Groups-Isomorphic-to-the-Little-Group","page":"Little Group in 2D","title":"Finding Point Groups Isomorphic to the Little Group","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"little_symmetry_candidates = Tuple{PointSymmetry, Vector{Int}}[]\nfor i in 1:32\n    ps = PointSymmetryDatabase.get(i)\n    ϕ = group_isomorphism(lg, ps.group)\n    if !isnothing(ϕ)\n        push!(little_symmetry_candidates, (ps, ϕ))\n    end\nend\n(psym2, ϕ) = first(little_symmetry_candidates)\n\nlg_matrep2 = lg_matrep[ϕ]\nprintln(\"Matrix Representations (Isomorphic): $lg_matrep2\")","category":"page"},{"location":"generated/example_little_group_2d/#Multiplication-Tables","page":"Little Group in 2D","title":"Multiplication Tables","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"println(\"Parent Point Group\")\nprintln(\"------------------\")\ndisplay_matrix(stdout, group_multiplication_table(psym2))\nprintln(\"Little Group\")\nprintln(\"------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep))\nprintln(\"Isomorphic Little Group\")\nprintln(\"-----------------------\")\ndisplay_matrix(stdout, group_multiplication_table(lg_matrep2))","category":"page"},{"location":"generated/example_little_group_2d/#Irreps-and-Little-Groups","page":"Little Group in 2D","title":"Irreps and Little Groups","text":"","category":"section"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"println(\"Irreps and Little Groups\")\nprintln(\"------------------------\")\nfor tsic in get_irrep_components(tsym)\n    idx = tsic.irrep_index\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little = little_symmetry(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group: { name: \\\"$(psym_little.hermann_mauguin)\\\", order: $(group_order(psym_little)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little_compatible: $(iscompatible(tsym, idx, psym_little))\")\nend","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"","category":"page"},{"location":"generated/example_little_group_2d/","page":"Little Group in 2D","title":"Little Group in 2D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"API/group/#Group","page":"Group","title":"Group","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"CurrentModule = TightBindingLattice","category":"page"},{"location":"API/group/#AbstractGroup","page":"Group","title":"AbstractGroup","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"AbstractGroup","category":"page"},{"location":"API/group/#TightBindingLattice.AbstractGroup","page":"Group","title":"TightBindingLattice.AbstractGroup","text":"AbstractGroup\n\nAbstract type for abstract groups. Currently the only subtype is FiniteGroup.\n\n\n\n\n\n","category":"type"},{"location":"API/group/#FiniteGroup","page":"Group","title":"FiniteGroup","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"FiniteGroup","category":"page"},{"location":"API/group/#TightBindingLattice.FiniteGroup","page":"Group","title":"TightBindingLattice.FiniteGroup","text":"FiniteGroup\n\nFinite group, with elements {1, 2, 3,..., n}. The identity element is always 1. Can be constructed using FiniteGroup(multiplication_table)\n\nFields\n\nmultiplication_table::Matrix{Int}: multiplication table\nperiod_lengths::Vector{Int}: period length (order) of every element\ninverses::Vector{Int}: inverse of every element\nconjugacy_classes::Vector{Vector{Int}}: conjugacy classes\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> FiniteGroup([1 2; 2 1])\nFiniteGroup([1 2; 2 1], [1, 2], [1, 2], [[1], [2]])\n\n\n\n\n\n","category":"type"},{"location":"API/group/","page":"Group","title":"Group","text":"element(::FiniteGroup, ::Any)\nelements(::FiniteGroup)\nelement_name(::FiniteGroup, ::Any)\nelement_names(::FiniteGroup)\ngroup_order(::FiniteGroup)\ngroup_order(::FiniteGroup, ::Any)\nperiod_length(::FiniteGroup, ::Any)\ngroup_multiplication_table(::FiniteGroup)\nisabelian(::FiniteGroup)\ngroup_product(::FiniteGroup)\ngroup_inverse(::FiniteGroup)\nTightBindingLattice.group_inverse(::FiniteGroup, ::Int)\nconjugacy_class(::FiniteGroup, ::Int)\ngenerate_subgroup(::FiniteGroup, ::Int)\nissubgroup(::FiniteGroup, ::Set{Int})\nminimal_generating_set(::FiniteGroup)\ngroup_isomorphism(::FiniteGroup, ::FiniteGroup)\ngroup_multiplication_table(::Vector, ::Function)\nishomomorphic(::FiniteGroup, ::Vector)","category":"page"},{"location":"API/group/#TightBindingLattice.element-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.element","text":"element(group, idx)\n\nReturn the element of index idx. For FiniteGroup, this is somewhat meaningless since the idxth element is idx. The sole purpose of this function is the bounds checking.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.elements-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.elements","text":"elements(group)\n\nReturn the elements of the group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.element_name-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.element_name","text":"element_name(group, idx)\n\nReturn the name of element at index idx, which is just the string of idx.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.element_names-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.element_names","text":"element_names(group)\n\nReturn the names of element.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_order-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_order","text":"group_order(group)\n\nOrder of group (i.e. number of elements)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_order-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.group_order","text":"group_order(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.period_length-Tuple{FiniteGroup,Any}","page":"Group","title":"TightBindingLattice.period_length","text":"period_length(group, g)\n\nOrder of group element (i.e. period length)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_multiplication_table-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(group)\n\nReturn multiplcation table of the group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.isabelian-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.isabelian","text":"isabelian(group)\n\nCheck if the group is abelian.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_product-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_product","text":"group_product(group)\n\nReturn a function which computes the group product.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_inverse-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.group_inverse","text":"group_inverse(group)\n\nGet a function which gives inverse.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_inverse-Tuple{FiniteGroup,Int64}","page":"Group","title":"TightBindingLattice.group_inverse","text":"group_inverse(group, g)\n\nGet inverse of element/elements g.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.conjugacy_class-Tuple{FiniteGroup,Int64}","page":"Group","title":"TightBindingLattice.conjugacy_class","text":"conjugacy_class(group::FiniteGroup, i::Integer)\n\nConjugacy class of the element i.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.generate_subgroup-Tuple{FiniteGroup,Int64}","page":"Group","title":"TightBindingLattice.generate_subgroup","text":"generate_subgroup(group::FiniteGroup, idx::Integer)\n\nsubgroup generated by generators. ⟨ {idx} ⟩\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.issubgroup-Tuple{FiniteGroup,Set{Int64}}","page":"Group","title":"TightBindingLattice.issubgroup","text":"issubgroup(group, subset)\n\nCheck whether the given subset is a subgroup of group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.minimal_generating_set-Tuple{FiniteGroup}","page":"Group","title":"TightBindingLattice.minimal_generating_set","text":"minimal_generating_set(group)\n\nGet minimally generating set of the finite group.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_isomorphism-Tuple{FiniteGroup,FiniteGroup}","page":"Group","title":"TightBindingLattice.group_isomorphism","text":"group_isomorphism(group1, group2)\n\nFind the isomorphism ϕ: G₁ → G₂. Return nothing if not isomorphic.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.group_multiplication_table-Tuple{Array{T,1} where T,Function}","page":"Group","title":"TightBindingLattice.group_multiplication_table","text":"group_multiplication_table(elements, product=(*))\n\nGenerate a multiplication table from elements with product.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.ishomomorphic-Tuple{FiniteGroup,Array{T,1} where T}","page":"Group","title":"TightBindingLattice.ishomomorphic","text":"ishomomorphic(group, representation; product=(*), equal=(==))\n\nCheck whether representation is homomorphic to group under product and equal, order preserved.\n\n\n\n\n\n","category":"method"},{"location":"API/group/#Permutation","page":"Group","title":"Permutation","text":"","category":"section"},{"location":"API/group/","page":"Group","title":"Group","text":"Permutation\nBase.:(*)(::Permutation, ::Permutation)\ngenerate_group(::Permutation...)\nisidentity(::Permutation)","category":"page"},{"location":"API/group/#TightBindingLattice.Permutation","page":"Group","title":"TightBindingLattice.Permutation","text":"Permutation(perms; max_order=2048)\n\nCreate a permutation of integers from 1 to n. perms should be a permutation of 1:n.\n\nArguments\n\nperms: an integer vector containing a permutation of integers from 1 to n\nmax_order: maximum order\n\nNote\n\nThe convention for the permutation is that map[i] gets mapped to i. In other words, map tells you where each element is from.\n\n\n\n\n\n","category":"type"},{"location":"API/group/#Base.:*-Tuple{Permutation,Permutation}","page":"Group","title":"Base.:*","text":"*(p1 ::Permutation, p2 ::Permutation)\n\nMultiply the two permutation. NOT THIS: (Return [p2.map[x] for x in p1.map].) BUT THIS: (Return [p1.map[x] for x in p2.map].)\n\nExamples\n\njulia> using TightBindingLattice\n\njulia> Permutation([2,1,3]) * Permutation([1,3,2])\nPermutation([2, 3, 1], 3)\n\njulia> Permutation([1,3,2]) * Permutation([2,1,3])\nPermutation([3, 1, 2], 3)\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.generate_group-Tuple{Vararg{Permutation,N} where N}","page":"Group","title":"TightBindingLattice.generate_group","text":"generate_group(generators...)\n\nReturn a FiniteGroup generated by the generators.\n\nArguments\n\ngenerators::Permutation...: generating permutations\n\n\n\n\n\n","category":"method"},{"location":"API/group/#TightBindingLattice.isidentity-Tuple{Permutation}","page":"Group","title":"TightBindingLattice.isidentity","text":"isidentity(perm::Permutation)\n\nTest whether the permutation is an identity.\n\n\n\n\n\n","category":"method"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"EditURL = \"https://github.com/kyungminlee/TightBindingLattice.jl/blob/master/examples/example_little_group_3d.jl\"","category":"page"},{"location":"generated/example_little_group_3d/#Little-Group-in-3D","page":"Little Group in 3D","title":"Little Group in 3D","text":"","category":"section"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"using TightBindingLattice\n\nunitcell = makeunitcell([1.0 0.0 0.0; 0.0 1.0 0.0; 0 0 1]; SiteType=String)\naddsite!(unitcell, \"Ox\", FractCoord([0,0,0], [0.5, 0.0, 0.0]))\naddsite!(unitcell, \"Oy\", FractCoord([0,0,0], [0.0, 0.5, 0.0]))","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"Currently, makelattice in three-dimension is not well supported","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"lattice = makelattice(unitcell, [4 0 0; 0 4 0; 0 0 3], [1 0 0; 0 1 0; 0 0 1])\ntsym = TranslationSymmetry(lattice.orthocube, [1 0 0; 0 1 0; 0 0 1])\npsym = project(PointSymmetryDatabase.get(15), [1 0 0; 0 1 0; 0 0 1])\n\nfor idx in 1:num_irreps(tsym)\n    kf = tsym.fractional_momenta[idx]\n    k = lattice.unitcell.reducedreciprocallatticevectors * kf\n    psym_little1 = little_symmetry(tsym, idx, psym)\n    psym_little2 = TightBindingLattice.little_symmetry_iso(tsym, idx, psym)\n    println(\"- irrep_index: $(idx)\")\n    println(\"  momentum: $(k)\")\n    println(\"  little_point_group1: { name: \\\"$(psym_little1.hermann_mauguin)\\\", order: $(group_order(psym_little1)) }\")\n    println(\"  little_point_group2: { name: \\\"$(psym_little2.hermann_mauguin)\\\", order: $(group_order(psym_little2)) }\")\n    println(\"  is_psym_compatible: $(iscompatible(tsym, idx, psym))\")\n    println(\"  is_psym_little1_compatible: $(iscompatible(tsym, idx, psym_little1))\")\n    println(\"  is_psym_little2_compatible: $(iscompatible(tsym, idx, psym_little2))\")\nend","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"","category":"page"},{"location":"generated/example_little_group_3d/","page":"Little Group in 3D","title":"Little Group in 3D","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Welcome-to-TightBindingLattice","page":"Home","title":"Welcome to TightBindingLattice","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TightBindingLattice is a package that provides funtionalities to define lattices and perform symmetry analysis, with focus on interacting quantum Hamiltonians.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TightBindingLattice is currently not included in Julia's default package registry. To install, add the package registry KyugminLeeRegistry and then install the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.5) pkg> registry add https://github.com/kyungminlee/KyungminLeeRegistry.git\n(@v1.5) pkg> add TightBindingLattice","category":"page"},{"location":"Symmetry/symmetry-space/#Symmetry-Analysis","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"","category":"section"},{"location":"Symmetry/symmetry-space/#Group","page":"Symmetry Analysis","title":"Group","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Group contains the group structure of a symmetry","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"multiplication table\norder (period length) of every element","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Currently, the only type which implements a group is FiniteGroup.","category":"page"},{"location":"Symmetry/symmetry-space/#Space-Symmetry","page":"Symmetry Analysis","title":"Space Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Symmetry on the other hand, is a representation of the group structure in some space. Examples are: TranslationSymmetry, PointSymmetry. Fields are","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"group\ngenerators\nconjugacy classes\ncharacter table\nirreps\nelement names","category":"page"},{"location":"Symmetry/symmetry-space/#Translation-Symmetry","page":"Symmetry Analysis","title":"Translation Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"TranslationSymmetry","category":"page"},{"location":"Symmetry/symmetry-space/#Point-Symmetry","page":"Symmetry Analysis","title":"Point Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"PointSymmetry has additional info","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"matrix_representations (i.e. representation in units of lattice vectors)\nSchoenflies\nHermann-Mauguin","category":"page"},{"location":"Symmetry/symmetry-space/#Symmorphic-Space-Symmetry","page":"Symmetry Analysis","title":"Symmorphic Space Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/#Symmetry-Embedding","page":"Symmetry Analysis","title":"Symmetry Embedding","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"An \"embedding\" of a symmetry onto a lattice, is a symmetry structure whose elements are permutations of sites represented by SitePermutation.","category":"page"},{"location":"Symmetry/symmetry-space/#Symmetry-Embedding-of-Symmorphic-Symmetry","page":"Symmetry Analysis","title":"Symmetry Embedding of Symmorphic Symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Site mapping","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"     T ⋊ P →  E(L,P)\n\n     ↓     ↘    ↓\n\n  E(L,T)   →  E(L, T ⋊ P)","category":"page"},{"location":"Symmetry/symmetry-space/#Compatibility-between-symmetries,-symmetry-embeddings,-and-their-irrep-components","page":"Symmetry Analysis","title":"Compatibility between symmetries, symmetry-embeddings, and their irrep components","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"In case of (symmorphic) space symmetry, we want to make sure that the translation symmetry and the point symmetry are \"compatible\".","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"The compatibility condition is the following","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-translation-symmetry","page":"Symmetry Analysis","title":"1. Between lattice and translation symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Lattice is built on (1) definition of unitcell, and (2) Bravais lattice. Since the second part, the Bravais lattice (with periodic boundary condition), encodes directly the information of the translation symmetry, a Lattice and a TranslationSymmetry is compatible if they share the same Bravais lattice. No further requirement is needed.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-point-symmetry","page":"Symmetry Analysis","title":"2. Between lattice and point symmetry","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"In order for a point symmetry to be a good symmetry of the lattice, we need the Bravais lattice to be invariant under the point symmetry at least. In an infinite lattice, this is always the case, and no requires no checks. For finite size lattice, however, the situation is different: Since the finite size lattice with periodic boundary condition can be understood as an infinite lattice modulo supercell, the Bravais lattice of the supercell also needs to be invariant under all operations of the point symmetry. The requirement therefore is that the column vectors of the shape matrix after point operation remain integer multiples of themselves.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-translation-symmetry-and-point-symmetry.","page":"Symmetry Analysis","title":"3. Between translation symmetry and point symmetry.","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Same as 2.","category":"page"},{"location":"Symmetry/symmetry-space/#.-Between-lattice-and-translation-symmetry-embedding.","page":"Symmetry Analysis","title":"4. Between lattice and translation symmetry embedding.","text":"","category":"section"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"Translation symmetry embedding is ","category":"page"},{"location":"Symmetry/symmetry-space/","page":"Symmetry Analysis","title":"Symmetry Analysis","text":"a TS PS L TSE PSE\nTS same matrix shape matrix invariant under point operation same shape matrix  \nPS     \nL     \nTSE     \nPSE     ","category":"page"},{"location":"Symmetry/symmetry-space/#Symmorphic-Symmetry","page":"Symmetry Analysis","title":"Symmorphic Symmetry","text":"","category":"section"}]
}
