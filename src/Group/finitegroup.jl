export FiniteGroup

export order
export n_elements
export group_product
export generate_subgroup
export is_subgroup
export is_abelian

abstract type AbstractGroup end
abstract type AbstractAbelianGroup <: AbstractGroup end


#=
ConjugacyClassType = NamedTuple{(:name,), Tuple{String}}
RepresentationType = NamedTuple{(:name, :matrices), Tuple{String, Vector{Matrix{Number}}}}
=#

struct FiniteGroup <: AbstractAbelianGroup
    multiplication_table::Matrix{Int}
    period_lengths::Vector{Int}

    function FiniteGroup(mtab::AbstractMatrix{<:Integer})
        n_element = size(mtab, 1)
        size(mtab, 2) != n_element && throw(ArgumentError("Multiplication table should be a square matrix"))
        elements = BitSet(1:n_element)
        for i in 1:n_element
            BitSet(mtab[:,i]) != elements && throw(ArgumentError("Multiplication not a group"))
            BitSet(mtab[i,:]) != elements && throw(ArgumentError("Multiplication not a group"))
        end

        period_lengths = zeros(Int, n_element)
        for idx in 1:n_element
            jdx = idx
            for i in 1:n_element
                if jdx == 1
                    period_lengths[idx] = i
                    break
                end
                jdx = mtab[jdx, idx]
            end
        end
        new(mtab, period_lengths)
    end
end

order(group::FiniteGroup) = size(group.multiplication_table, 1)
n_elements(group::FiniteGroup) = size(group.multiplication_table, 1)
is_abelian(group::FiniteGroup) = group.multiplication_table == transpose(group.multiplication_table)

"""
    group_product(group, lhs::Integer, rhs::Integer)
"""
function group_product(group::FiniteGroup, lhs::Integer, rhs::Integer)
    return group.multiplication_table[lhs, rhs]
end


"""
    group_product(group, lhs::AbstractSet{<:Integer}, rhs::Integer)
"""
function group_product(group::FiniteGroup,
                       lhs::AbstractSet{<:Integer}, rhs::Integer)
    return BitSet([group_product(group, x, rhs) for x in lhs])
end


"""
    group_product(mtab, lhs::Integer, rhs::AbstractSet{<:Integer})
"""
function group_product(group::FiniteGroup,
                       lhs::Integer, rhs::AbstractSet{<:Integer})
    return BitSet([group_product(group, lhs, x) for x in rhs])
end


"""
    group_product(mtab, lhs, rhs)
"""
function group_product(group::FiniteGroup,
                       lhs::AbstractSet{<:Integer},
                       rhs::AbstractSet{<:Integer})
    return BitSet([group_product(group, x, y) for x in lhs for y in rhs])
end



"""
    generate_subgroup(mtab, idx)

subgroup generated by `generators`. ⟨ {g} ⟩
"""
function generate_subgroup(group::FiniteGroup, idx::Integer)
    out = BitSet([1])
    jdx = idx
    for i in 1:order(group)
        jdx == 1 && return out
        push!(out, jdx)
        jdx = group_product(group, jdx, idx)
    end
    assert(false)
    return BitSet()
end


"""
    generate_subgroup(mtab, generators)

subgroup generated by `generators`. ⟨ S ⟩

"""
function generate_subgroup(group::FiniteGroup,
                           generators::G) where {G<:Union{<:AbstractSet{<:Integer}, <:AbstractVector{<:Integer}}}
    change = true
    subgroup = BitSet(generators)
    while change
        change = false
        for g1 in generators, g2 in subgroup
            g3 = group_product(group, g1, g2)
            if !(g3 in subgroup)
                change = true
                push!(subgroup, g3)
            end
        end
    end
    return subgroup
end


"""
    generate_subgroup(group, generators...)
"""
function generate_subgroup(group::FiniteGroup, generators::Integer...)
    return generate_subgroup(group, generators)
end


"""
    is_subgroup(mtab, subset)
"""
function is_subgroup(group::FiniteGroup,
                     subset::AbstractSet{<:Integer})
    return all(group_product(group, x, y) in subset for x in subset for y in subset)
end




function minimal_generating_set(group::FiniteGroup)
    ord_group ::Int = order(group)
    element_queue ::Vector{Tuple{Int, Int}} = collect(enumerate(group.period_lengths))
    sort!(element_queue, by=item->(-item[2], item[1]))

    function factorize(generators::Vector{Int}, span::BitSet, queue_begin::Int)::Bool
        ord_span = length(span)
        ord_span == ord_group && return true
        for i in queue_begin:ord_group
            (g, pl) = element_queue[i]
            if ord_group % (ord_span * pl) == 0
                new_span = generate_subgroup(group, group_product(group, span, g))
                if length(new_span) == ord_span * pl
                    push!(generators, g)
                    factorize(generators, new_span, i+1) && return true
                    pop!(generators)
                end
            end
        end
        return false
    end

    generators = Int[]
    sizehint!(generators, ord_group)
    factorize(generators, BitSet([1]), 1)
    return generators
end
